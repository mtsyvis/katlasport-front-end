{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/customer-management/forms/customer-form.component.css","webpack:///./src/app/customer-management/forms/customer-form.component.html","webpack:///./src/app/customer-management/forms/customer-form.component.ts","webpack:///./src/app/customer-management/list/customer-list.component.css","webpack:///./src/app/customer-management/list/customer-list.component.html","webpack:///./src/app/customer-management/list/customer-list.component.ts","webpack:///./src/app/customer-management/models/customer.ts","webpack:///./src/app/customer-management/services/customer.service.ts","webpack:///./src/app/hive-management/forms/hive-form.component.css","webpack:///./src/app/hive-management/forms/hive-form.component.html","webpack:///./src/app/hive-management/forms/hive-form.component.ts","webpack:///./src/app/hive-management/forms/hive-section-form.component.css","webpack:///./src/app/hive-management/forms/hive-section-form.component.html","webpack:///./src/app/hive-management/forms/hive-section-form.component.ts","webpack:///./src/app/hive-management/lists/hive-list.component.css","webpack:///./src/app/hive-management/lists/hive-list.component.html","webpack:///./src/app/hive-management/lists/hive-list.component.ts","webpack:///./src/app/hive-management/lists/hive-section-list.component.css","webpack:///./src/app/hive-management/lists/hive-section-list.component.html","webpack:///./src/app/hive-management/lists/hive-section-list.component.ts","webpack:///./src/app/hive-management/models/hive-section.ts","webpack:///./src/app/hive-management/models/hive.ts","webpack:///./src/app/hive-management/services/hive-section.service.ts","webpack:///./src/app/hive-management/services/hive.service.ts","webpack:///./src/app/main-page/main-page.component.css","webpack:///./src/app/main-page/main-page.component.html","webpack:///./src/app/main-page/main-page.component.ts","webpack:///./src/app/manager-control/forms/manager-form.component.css","webpack:///./src/app/manager-control/forms/manager-form.component.html","webpack:///./src/app/manager-control/forms/manager-form.component.ts","webpack:///./src/app/manager-control/lists/manager-list.component.css","webpack:///./src/app/manager-control/lists/manager-list.component.html","webpack:///./src/app/manager-control/lists/manager-list.component.ts","webpack:///./src/app/manager-control/models/manager.ts","webpack:///./src/app/manager-control/services/manager.service.ts","webpack:///./src/app/order-management/forms/order-customer-form.component.css","webpack:///./src/app/order-management/forms/order-customer-form.component.html","webpack:///./src/app/order-management/forms/order-customer-form.component.ts","webpack:///./src/app/order-management/forms/order-product-form.component.css","webpack:///./src/app/order-management/forms/order-product-form.component.html","webpack:///./src/app/order-management/forms/order-product-form.component.ts","webpack:///./src/app/order-management/lists/customer-orders-list.component.css","webpack:///./src/app/order-management/lists/customer-orders-list.component.html","webpack:///./src/app/order-management/lists/customer-orders-list.component.ts","webpack:///./src/app/order-management/lists/order-list.component.css","webpack:///./src/app/order-management/lists/order-list.component.html","webpack:///./src/app/order-management/lists/order-list.component.ts","webpack:///./src/app/order-management/lists/order-products-info-list.component.css","webpack:///./src/app/order-management/lists/order-products-info-list.component.html","webpack:///./src/app/order-management/lists/order-products-info-list.component.ts","webpack:///./src/app/order-management/models/order-list-item.ts","webpack:///./src/app/order-management/models/order-product-list-item.ts","webpack:///./src/app/order-management/services/order.service.ts","webpack:///./src/app/product-management/forms/product-category-form.component.css","webpack:///./src/app/product-management/forms/product-category-form.component.html","webpack:///./src/app/product-management/forms/product-category-form.component.ts","webpack:///./src/app/product-management/forms/product-form.component.css","webpack:///./src/app/product-management/forms/product-form.component.html","webpack:///./src/app/product-management/forms/product-form.component.ts","webpack:///./src/app/product-management/lists/product-category-list.component.css","webpack:///./src/app/product-management/lists/product-category-list.component.html","webpack:///./src/app/product-management/lists/product-category-list.component.ts","webpack:///./src/app/product-management/lists/product-category-product-list.component.css","webpack:///./src/app/product-management/lists/product-category-product-list.component.html","webpack:///./src/app/product-management/lists/product-category-product-list.component.ts","webpack:///./src/app/product-management/lists/product-list.component.css","webpack:///./src/app/product-management/lists/product-list.component.html","webpack:///./src/app/product-management/lists/product-list.component.ts","webpack:///./src/app/product-management/models/product-category.ts","webpack:///./src/app/product-management/models/product.ts","webpack:///./src/app/product-management/services/product-category.service.ts","webpack:///./src/app/product-management/services/product.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule, Component } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainPageComponent } from 'app/main-page/main-page.component';\r\nimport { HiveFormComponent } from './hive-management/forms/hive-form.component';\r\nimport { HiveSectionFormComponent } from './hive-management/forms/hive-section-form.component';\r\nimport { HiveListComponent } from './hive-management/lists/hive-list.component';\r\nimport { HiveSectionListComponent } from './hive-management/lists/hive-section-list.component';\r\nimport { ProductCategoryFormComponent } from './product-management/forms/product-category-form.component';\r\nimport { ProductFormComponent } from './product-management/forms/product-form.component';\r\nimport { ProductCategoryListComponent } from './product-management/lists/product-category-list.component';\r\nimport { ProductCategoryProductListComponent } from './product-management/lists/product-category-product-list.component';\r\nimport { ProductListComponent } from './product-management/lists/product-list.component';\r\nimport { OrderListComponent } from './order-management/lists/order-list.component';\r\nimport { CustomerListComponent } from './customer-management/list/customer-list.component';\r\nimport { CustomerFormComponent } from './customer-management/forms/customer-form.component';\r\nimport { CustomerOrdersListComponent } from './order-management/lists/customer-orders-list.component';\r\nimport { OrderCustomerFormComponent } from './order-management/forms/order-customer-form.component';\r\nimport { OrderProductsInfoListComponent } from './order-management/lists/order-products-info-list.component';\r\nimport { OrderProductFormComponent } from './order-management/forms/order-product-form.component';\r\nimport { ManagerListComponent } from './manager-control/lists/manager-list.component';\r\nimport { ManagerFormComponent } from './manager-control/forms/manager-form.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/main', pathMatch: 'full' },\r\n  { path: 'main', component: MainPageComponent },\r\n  { path: 'categories', component: ProductCategoryListComponent },\r\n  { path: 'category', component: ProductCategoryFormComponent },\r\n  { path: 'category/:id', component: ProductCategoryFormComponent },\r\n  { path: 'category/:id/products', component: ProductCategoryProductListComponent },\r\n  { path: 'products', component: ProductListComponent },\r\n  { path: 'product/:id', component: ProductFormComponent },\r\n  { path: 'category/:categoryId/product/:id', component: ProductFormComponent },\r\n  { path: 'hives', component: HiveListComponent },\r\n  { path: 'hive', component: HiveFormComponent },\r\n  { path: 'hive/:id', component: HiveFormComponent },\r\n  { path: 'hive/:id/sections', component: HiveSectionListComponent },\r\n  { path: 'hive/:hiveId/sections/:id', component: HiveSectionFormComponent },\r\n  { path: 'hive/:hiveId/section', component: HiveSectionFormComponent },\r\n  { path: 'orders', component: OrderListComponent },\r\n  { path: 'customers', component: CustomerListComponent },\r\n  { path: 'customer/:id', component: CustomerFormComponent },\r\n  { path: 'customer', component: CustomerFormComponent },\r\n  { path: 'customers/:customerId/orders', component: CustomerOrdersListComponent },\r\n  { path: 'customers/:customerId/order', component: OrderCustomerFormComponent },\r\n  { path: 'orders/:orderId/products', component: OrderProductsInfoListComponent },\r\n  { path: 'orders/:orderId/product', component: OrderProductFormComponent },\r\n  { path: 'managers', component: ManagerListComponent },\r\n  { path: 'manager', component: ManagerFormComponent },\r\n  { path: 'manager/:id', component: ManagerFormComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark justify-content-between\\\">\\r\\n  <div>\\r\\n    <a class=\\\"navbar-brand\\\" routerLink=\\\"/main\\\">\\r\\n      <span style=\\\"color: yellow; font-weight: bold; font-family: Arial, Helvetica, sans-serif; margin-right:0.1em; border: yellow solid 1px; padding: 6px;\\\">K</span>\\r\\n      <span style=\\\"margin-left: 5px;\\\">KatlaSport</span>\\r\\n    </a>\\r\\n  </div>\\r\\n  <div class=\\\"collapse navbar-collapse\\\" style=\\\"margin-left: 100px; margin-bottom: 2px;\\\" id=\\\"navbarNavDropdown\\\">\\r\\n    <ul class=\\\"navbar-nav\\\">\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/categories\\\">Categories</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/products\\\">Products</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/hives\\\">Hives</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/orders\\\">Orders</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/customers\\\">Customers</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/managers\\\">Managers</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item dropdown\\\">\\r\\n        <a class=\\\"nav-link dropdown-toggle\\\" href=\\\"#\\\" id=\\\"navbarDropdownMenuLink\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">Product Management</a>\\r\\n        <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"navbarDropdownMenuLink\\\">\\r\\n          <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Categories</a>\\r\\n          <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Products</a>\\r\\n        </div>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n  <form class=\\\"form-inline\\\">\\r\\n    <input class=\\\"form-control mr-sm-2\\\" type=\\\"search\\\" placeholder=\\\"Search\\\" aria-label=\\\"Search\\\">\\r\\n    <button class=\\\"btn btn-outline-success my-2 my-sm-0\\\" type=\\\"submit\\\">Search</button>\\r\\n  </form>\\r\\n</nav>\\r\\n<router-outlet></router-outlet>\\r\\n\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AppRoutingModule } from 'app/app-routing.module';\r\nimport { AppComponent } from 'app/app.component';\r\nimport { HiveFormComponent } from 'app/hive-management/forms/hive-form.component';\r\nimport { HiveSectionFormComponent } from 'app/hive-management/forms/hive-section-form.component';\r\nimport { HiveListComponent } from 'app/hive-management/lists/hive-list.component';\r\nimport { HiveSectionListComponent } from 'app/hive-management/lists/hive-section-list.component';\r\nimport { HiveSectionService } from 'app/hive-management/services/hive-section.service';\r\nimport { HiveService } from 'app/hive-management/services/hive.service';\r\nimport { MainPageComponent } from 'app/main-page/main-page.component';\r\nimport { ProductCategoryFormComponent } from 'app/product-management/forms/product-category-form.component';\r\nimport { ProductFormComponent } from 'app/product-management/forms/product-form.component';\r\nimport { ProductCategoryListComponent } from 'app/product-management/lists/product-category-list.component';\r\nimport { ProductCategoryProductListComponent } from 'app/product-management/lists/product-category-product-list.component';\r\nimport { ProductListComponent } from 'app/product-management/lists/product-list.component';\r\nimport { ProductCategoryService } from 'app/product-management/services/product-category.service';\r\nimport { ProductService } from 'app/product-management/services/product.service';\r\nimport { OrderListComponent } from './order-management/lists/order-list.component';\r\nimport { CustomerListComponent } from './customer-management/list/customer-list.component';\r\nimport { CustomerFormComponent } from './customer-management/forms/customer-form.component';\r\nimport { CustomerOrdersListComponent } from './order-management/lists/customer-orders-list.component';\r\nimport { OrderCustomerFormComponent } from './order-management/forms/order-customer-form.component';\r\nimport { OrderProductsInfoListComponent } from './order-management/lists/order-products-info-list.component';\r\nimport { OrderProductFormComponent } from './order-management/forms/order-product-form.component';\r\nimport { ManagerListComponent } from './manager-control/lists/manager-list.component';\r\nimport { ManagerFormComponent } from './manager-control/forms/manager-form.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MainPageComponent,\r\n    ProductCategoryListComponent,\r\n    ProductCategoryFormComponent,\r\n    ProductCategoryProductListComponent,\r\n    ProductListComponent,\r\n    ProductFormComponent,\r\n    HiveListComponent,\r\n    HiveFormComponent,\r\n    HiveSectionFormComponent,\r\n    HiveSectionListComponent,\r\n    OrderListComponent,\r\n    CustomerListComponent,\r\n    CustomerFormComponent,\r\n    CustomerOrdersListComponent,\r\n    OrderCustomerFormComponent,\r\n    OrderProductsInfoListComponent,\r\n    OrderProductFormComponent,\r\n    ManagerListComponent,\r\n    ManagerFormComponent,\r\n  ],\r\n  imports: [\r\n    // Angular imports\r\n    BrowserModule,\r\n    FormsModule,\r\n    NgbModule.forRoot(),\r\n    HttpClientModule,\r\n    // Application imports\r\n    AppRoutingModule,\r\n  ],\r\n  providers: [\r\n    // Angular providers\r\n    HttpClient,\r\n    // Application providers\r\n    ProductService,\r\n    ProductCategoryService,\r\n    HiveService,\r\n    HiveSectionService,\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Customer Editor</h2>\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #customerForm=\\\"ngForm\\\">\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\n      <label for=\\\"idLabel\\\">ID</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"customer.id\\\" name=\\\"id\\\"\\n        #id=\\\"ngModel\\\" readonly>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Customer Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" maxlength=\\\"60\\\"\\n        required [(ngModel)]=\\\"customer.name\\\" name=\\\"name\\\" #name=\\\"ngModel\\\">\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"name.errors.required\\\">Customer Name is required.</div>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"phone\\\" id=\\\"phoneLabel\\\">Customer Phone</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"phone\\\" aria-describedby=\\\"phoneLabel\\\" maxlength=\\\"20\\\"\\n        required [(ngModel)]=\\\"customer.phone\\\" name=\\\"phone\\\" #phone=\\\"ngModel\\\">\\n      <div *ngIf=\\\"phone.invalid && (phone.dirty || phone.touched)\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"phone.errors.required\\\">Customer Phone is required.</div>\\n        <div *ngIf=\\\"phone.errors.minlength\\\">Customer Phone must be not less than 20.</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"address\\\" id=\\\"addressLabel\\\">Customer Address</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"adress\\\" aria-describedby=\\\"addressLabel\\\" maxlength=\\\"300\\\" required\\n        [(ngModel)]=\\\"customer.address\\\" name=\\\"address\\\" #address=\\\"ngModel\\\">\\n      <div *ngIf=\\\"address.invalid && (address.dirty || address.touched)\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"address.errors.required\\\">Customer address is required.</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\n      </div>\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\n      </div>\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onDelete()\\\">Delete</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CustomerService } from '../services/customer.service';\nimport { Customer } from '../models/customer';\nimport { from } from 'rxjs';\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css']\n})\nexport class CustomerFormComponent implements OnInit {\n  customer = new Customer(0, \"\", \"\", \"\");\n  existed = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private customerService: CustomerService\n  ) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(p => {\n      if (p['id'] === undefined)\n        return;\n      this.customer\n      this.customerService.getCustomer(p['id']).subscribe(c => this.customer = c);\n      this.existed = true;\n    })\n  }\n\n  navigateToCustomers() {\n    this.router.navigate(['/customers']);\n  }\n\n  onCancel() {\n    this.navigateToCustomers();\n  }\n\n  onSubmit() {\n    if (this.existed) {\n      this.customerService.updateCustomer(this.customer).subscribe(h => this.navigateToCustomers());\n    } else {\n      this.customerService.addCustomer(this.customer).subscribe(h => this.navigateToCustomers());\n    }\n  }\n\n  onDelete() {\n    \n      this.customerService.deleteCustomer(this.customer.id).subscribe(h => this.navigateToCustomers());\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Customer List</h2>\\n  <table class=\\\"table table-nofluid\\\">\\n    <thead>\\n      <th scope=\\\"col\\\">#</th>\\n      <th scope=\\\"col\\\">Name</th>\\n      <th scope=\\\"col\\\">Address</th>\\n      <th scope=\\\"col\\\">Phone</th>\\n      <th scope=\\\"col\\\"></th>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let customer of customers\\\">\\n        <th scope=\\\"row\\\">{{customer.id}}</th>\\n        <td>{{customer.name}}</td>\\n        <td>{{customer.address}}</td>\\n        <td>{{customer.phone}}</td>\\n        <td>\\n          <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product action buttons\\\">\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\n              <button routerLink=\\\"/customer/{{customer.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\n            </div>\\n\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View orders\\\">\\n              <button routerLink=\\\"{{customer.id}}/orders\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View orders</button>\\n            </div>\\n          </div>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"New group\\\">\\n      <button routerLink=\\\"/customer\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">New customer</button>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Customer } from '../models/customer';\nimport { CustomerService } from '../services/customer.service';\n\n@Component({\n  selector: 'app-customer-list',\n  templateUrl: './customer-list.component.html',\n  styleUrls: ['./customer-list.component.css']\n})\nexport class CustomerListComponent implements OnInit {\n  customers: Customer[];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private customerService: CustomerService\n  ) { }\n\n  ngOnInit() {\n    this.customerService.getCustomers().subscribe(c => this.customers = c);\n  }\n\n  onDelete(id: number) {\n    this.customerService.deleteCustomer(id);\n  }\n}\n","export class Customer {\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public address: string,\r\n        public phone: string\r\n    ) { }\r\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'environments/environment';\nimport { Customer } from '../models/customer';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  private url = environment.apiUrl + 'api/customers/';\n\n  constructor(private http: HttpClient) { }\n\n  getCustomers(): Observable<Array<Customer>> {\n    return this.http.get<Array<Customer>>(this.url + \"show\");\n  }\n\n  getCustomer(id: number): Observable<Customer> {\n    return this.http.get<Customer>(this.url + `show/${id}`);\n  }\n  \n  addCustomer(customer: Customer): Observable<Customer> {\n    return this.http.post<Customer>(`${this.url}create`, customer);\n  }\n\n  updateCustomer(customer: Customer): Observable<Object> {\n    return this.http.post<Object>(`${this.url}update/${customer.id}`, customer);\n  }\n\n  deleteCustomer(id:number): Observable<Object>{\n    return this.http.post<Object>(`${this.url}destroy/${id}`, null);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Hive Editor</h2>\\r\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #hiveForm=\\\"ngForm\\\">\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"idLabel\\\">ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"hive.id\\\" name=\\\"id\\\"\\r\\n        #id=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Hive Name</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\"\\r\\n        required [(ngModel)]=\\\"hive.name\\\" name=\\\"name\\\" #name=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"name.errors.required\\\">Hive Name is required.</div>\\r\\n        <div *ngIf=\\\"name.errors.minlength\\\">Hive Name must be at least 4 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"code\\\" id=\\\"codeLabel\\\">Hive Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"code\\\" aria-describedby=\\\"codeLabel\\\" minlength=\\\"5\\\" maxlength=\\\"5\\\"\\r\\n        required [(ngModel)]=\\\"hive.code\\\" name=\\\"code\\\" #code=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"code.invalid && (code.dirty || code.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"code.errors.required\\\">Hive Code is required.</div>\\r\\n        <div *ngIf=\\\"code.errors.minlength\\\">Hive Code must be not less than 5.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"address\\\" id=\\\"addressLabel\\\">Hive Address</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"adress\\\" aria-describedby=\\\"addressLabel\\\" maxlength=\\\"300\\\" required\\r\\n        [(ngModel)]=\\\"hive.address\\\" name=\\\"address\\\" #address=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"address.invalid && (address.dirty || address.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"address.errors.required\\\">Hive Name is required.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"lastUpdated\\\" id=\\\"lastUpdatedLabel\\\">Last Update</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastUpdated\\\" aria-describedby=\\\"lastUpdatedLabel\\\" required\\r\\n        [(ngModel)]=\\\"hive.lastUpdated\\\" name=\\\"lastUpdated\\\" #lastUpdated=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed && !hive.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDelete()\\\">Delete</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Purge group\\\" *ngIf=\\\"existed && hive.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onUndelete()\\\">Undelete</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"onPurge()\\\">Purge</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HiveService } from '../services/hive.service';\r\nimport { Hive } from '../models/hive';\r\n\r\n@Component({\r\n  selector: 'app-hive-form',\r\n  templateUrl: './hive-form.component.html',\r\n  styleUrls: ['./hive-form.component.css']\r\n})\r\nexport class HiveFormComponent implements OnInit {\r\n\r\n  hive = new Hive(0, \"\", \"\", \"\", false, \"\");\r\n  existed = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private hiveService: HiveService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      if (p['id'] === undefined) return;\r\n      this.hiveService.getHive(p['id']).subscribe(h => this.hive = h);\r\n      this.existed = true;\r\n    });\r\n  }\r\n\r\n  navigateToHives() {\r\n    this.router.navigate(['/hives']);\r\n  }\r\n\r\n  onCancel() {\r\n    this.navigateToHives();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.existed) {\r\n      this.hiveService.updateHive(this.hive).subscribe(h => this.navigateToHives());\r\n    } else {\r\n      this.hiveService.addHive(this.hive).subscribe(h => this.navigateToHives());\r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n    if (this.hive) {\r\n      this.hiveService.setHiveStatus(this.hive.id, true).subscribe(c => this.hive.isDeleted = true);\r\n    }\r\n  }\r\n\r\n  onUndelete() {\r\n    if (this.hive) {\r\n      this.hiveService.setHiveStatus(this.hive.id, false).subscribe(c => this.hive.isDeleted = false);\r\n    }\r\n  }\r\n\r\n  onPurge() {\r\n    if (this.hive) {\r\n      this.hiveService.deleteHive(this.hive.id).subscribe(h => this.navigateToHives());\r\n    }\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Hive Section Editor</h2>\\r\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #hiveSectionForm=\\\"ngForm\\\">\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"idLabel\\\">ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"hiveSection.id\\\" name=\\\"id\\\"\\r\\n        #id=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"hiveIdLabel\\\">Hive ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"hiveId\\\" aria-describedby=\\\"hiveIdLabel\\\" [(ngModel)]=\\\"hiveId\\\" name=\\\"hiveId\\\"\\r\\n        #id=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Hive Section Name</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\"\\r\\n        required [(ngModel)]=\\\"hiveSection.name\\\" name=\\\"name\\\" #name=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"name.errors.required\\\">Hive Name is required.</div>\\r\\n        <div *ngIf=\\\"name.errors.minlength\\\">Hive Name must be at least 4 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"code\\\" id=\\\"codeLabel\\\">Hive Section Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"code\\\" aria-describedby=\\\"codeLabel\\\" minlength=\\\"5\\\" maxlength=\\\"5\\\"\\r\\n        required [(ngModel)]=\\\"hiveSection.code\\\" name=\\\"code\\\" #code=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"code.invalid && (code.dirty || code.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"code.errors.required\\\">Hive Code is required.</div>\\r\\n        <div *ngIf=\\\"code.errors.minlength\\\">Hive Code must be not less than 5.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"lastUpdated\\\" id=\\\"lastUpdatedLabel\\\">Last Update</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastUpdated\\\" aria-describedby=\\\"lastUpdatedLabel\\\" required\\r\\n        [(ngModel)]=\\\"hiveSection.lastUpdated\\\" name=\\\"lastUpdated\\\" #lastUpdated=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed && !hiveSection.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDelete()\\\">Delete</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Purge group\\\" *ngIf=\\\"existed && hiveSection.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onUndelete()\\\">Undelete</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"onPurge()\\\">Purge</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HiveSectionService } from '../services/hive-section.service';\r\nimport { HiveSection } from '../models/hive-section';\r\n\r\n@Component({\r\n  selector: 'app-hive-section-form',\r\n  templateUrl: './hive-section-form.component.html',\r\n  styleUrls: ['./hive-section-form.component.css']\r\n})\r\nexport class HiveSectionFormComponent implements OnInit {\r\n\r\n  hiveSection = new HiveSection(0, \"\", \"\", false, \"\", 0);\r\n  hiveId: number;\r\n  existed = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private hiveSectionService: HiveSectionService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      this.hiveId = p[\"hiveId\"];\r\n      this.hiveSection.storeHiveId = this.hiveId;\r\n      if (p['id'] === undefined)\r\n        return;\r\n      this.hiveSectionService.getHiveSection(p['id']).subscribe(h => this.hiveSection = h);\r\n      this.existed = true;\r\n    });\r\n  }\r\n\r\n  navigateToSections() {\r\n    this.router.navigateByUrl(`hive/${this.hiveId}/sections`);\r\n  }\r\n\r\n  onCancel() {\r\n    this.navigateToSections();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.existed) {\r\n      this.hiveSection.storeHiveId = this.hiveId;\r\n      this.hiveSectionService.updateHiveSecion(this.hiveSection).subscribe(h => this.navigateToSections());\r\n    } else {\r\n      this.hiveSectionService.addHiveSection(this.hiveSection).subscribe(h => this.navigateToSections());\r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n    if (this.hiveSection) {\r\n      this.hiveSectionService.setHiveSectionStatus(this.hiveSection.id, true).subscribe(c => this.hiveSection.isDeleted = true);\r\n    }\r\n  }\r\n\r\n  onUndelete() {\r\n    if (this.hiveSection) {\r\n      this.hiveSectionService.setHiveSectionStatus(this.hiveSection.id, false).subscribe(c => this.hiveSection.isDeleted = false);\r\n    }\r\n  }\r\n\r\n  onPurge() {\r\n    if (this.hiveSection) {\r\n      this.hiveSectionService.deleteHiveSection(this.hiveSection.id).subscribe(h => this.navigateToSections());\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Hive List</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <!-- TODO STEP 6 - Add Code and Name headers here. -->\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let hive of hives\\\">\\r\\n        <th scope=\\\"row\\\">{{hive.id}}</th>\\r\\n        <!-- TODO STEP 6 - Add code and name values here. -->\\r\\n        <th scope=\\\"row\\\">{{hive.code}}</th>\\r\\n        <th scope=\\\"row\\\">{{hive.name}}</th>\\r\\n        <td>\\r\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Hive action buttons\\\"\\r\\n            style=\\\"display: block; white-space:nowrap;\\\">\\r\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"!hive.isDeleted\\\"\\r\\n              (click)=\\\"onDelete(hive.id)\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger\\\">Delete</button>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"hive.isDeleted\\\" class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\"\\r\\n              (click)=\\\"onRestore(hive.id)\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Restore</button>\\r\\n            </div>\\r\\n\\r\\n            <!-- TODO STEP 6 - Add buttons here. -->\\r\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"View group\\\">\\r\\n              <button routerLink=\\\"/hive/{{hive.id}}/sections\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View\\r\\n                sections</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\r\\n              <button routerLink=\\\"/hive/{{hive.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"New group\\\">\\r\\n      <button routerLink=\\\"/hive\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">New hive</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { HiveListItem } from '../models/hive-list-item';\r\nimport { HiveService } from '../services/hive.service';\r\n\r\n@Component({\r\n  selector: 'app-hive-list',\r\n  templateUrl: './hive-list.component.html',\r\n  styleUrls: ['./hive-list.component.css']\r\n})\r\nexport class HiveListComponent implements OnInit {\r\n\r\n  hives: HiveListItem[];\r\n\r\n  constructor(private hiveService: HiveService) { }\r\n\r\n  ngOnInit() {\r\n    this.getHives();\r\n  }\r\n\r\n  getHives() {\r\n    this.hiveService.getHives().subscribe(h => this.hives = h);\r\n  }\r\n\r\n  onDelete(hiveId: number) {\r\n    var hive = this.hives.find(h => h.id == hiveId);\r\n    if (hive) {\r\n      this.hiveService.setHiveStatus(hiveId, true).subscribe(c => hive.isDeleted = true);\r\n    }\r\n  }\r\n\r\n  onRestore(hiveId: number) {\r\n    var hive = this.hives.find(h => h.id == hiveId);\r\n    if (hive) {\r\n      this.hiveService.setHiveStatus(hiveId, false).subscribe(c => hive.isDeleted = false);\r\n    }\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Hive Sections for Hive</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <!-- TODO STEP 8 - Add Code and Name headers here. -->\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let hiveSection of hiveSections\\\">\\r\\n        <th scope=\\\"row\\\">{{hiveSection.id}}</th>\\r\\n        <th scope=\\\"row\\\">{{hiveSection.code}}</th>\\r\\n        <th scope=\\\"row\\\">{{hiveSection.name}}</th>\\r\\n        <td>\\r\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Hive action buttons\\\"\\r\\n            style=\\\"display: block; white-space:nowrap;\\\">\\r\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"!hiveSection.isDeleted\\\"\\r\\n              (click)=\\\"onDelete(hiveSection.id)\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger\\\">Delete</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Undelete group\\\" *ngIf=\\\"hiveSection.isDeleted\\\"\\r\\n              (click)=\\\"onUndelete(hiveSection.id)\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Restore</button>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\r\\n              <button routerLink=\\\"{{hiveSection.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Back group\\\">\\r\\n      <button routerLink=\\\"/hives\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Back</button>\\r\\n    </div> \\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Add group\\\">\\r\\n      <button routerLink=\\\"/hive/{{hiveId}}/section\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Add hive section</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HiveSectionListItem } from '../models/hive-section-list-item';\r\nimport { HiveService } from '../services/hive.service';\r\nimport { HiveSectionService } from '../services/hive-section.service';\r\n\r\n@Component({\r\n  selector: 'app-hive-section-list',\r\n  templateUrl: './hive-section-list.component.html',\r\n  styleUrls: ['./hive-section-list.component.css']\r\n})\r\nexport class HiveSectionListComponent implements OnInit {\r\n\r\n  hiveId: number;\r\n  hiveSections: Array<HiveSectionListItem>;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private hiveService: HiveService,\r\n    private hiveSectionService: HiveSectionService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      this.hiveId = p['id'];\r\n      this.hiveService.getHiveSections(this.hiveId).subscribe(s => this.hiveSections = s);\r\n    })\r\n  }\r\n\r\n  onDelete(hiveSectionId: number) {\r\n    var hiveSection = this.hiveSections.find(h => h.id == hiveSectionId);\r\n    if (hiveSection) {\r\n      this.hiveSectionService.setHiveSectionStatus(hiveSectionId, true).subscribe(c => hiveSection.IsDeleted = false);\r\n    }\r\n  }\r\n\r\n  onUndelete(hiveSectionId: number) {\r\n    var hiveSection = this.hiveSections.find(h => h.id == hiveSectionId);\r\n    if (hiveSection) {\r\n      this.hiveSectionService.setHiveSectionStatus(hiveSectionId, false).subscribe(c => hiveSection.IsDeleted = true);\r\n    }\r\n  }\r\n}\r\n","export class HiveSection {\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public code: string,\r\n        public isDeleted: boolean,\r\n        public lastUpdated: string,\r\n        public storeHiveId: number        \r\n    ) {\r\n     }\r\n}\r\n","export class Hive {\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public code: string,\r\n        public address: string,\r\n        public isDeleted: boolean,\r\n        public lastUpdated: string\r\n    ) { }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { HiveSection } from '../models/hive-section';\r\nimport { HiveSectionListItem } from '../models/hive-section-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HiveSectionService {\r\n  private url = environment.apiUrl + 'api/sections/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getHiveSections(): Observable<Array<HiveSectionListItem>> {\r\n    return this.http.get<Array<HiveSectionListItem>>(this.url);\r\n  }\r\n\r\n  getHiveSection(hiveSectionId: number): Observable<HiveSection> {\r\n    return this.http.get<HiveSection>(`${this.url}${hiveSectionId}`);\r\n  }\r\n\r\n  setHiveSectionStatus(hiveSectionId: number, deletedStatus: boolean): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${hiveSectionId}/status/${deletedStatus}`, null);\r\n  }\r\n\r\n  addHiveSection(hiveSection: HiveSection): Observable<HiveSection> {\r\n    return this.http.post<HiveSection>(`${this.url}`, hiveSection);\r\n  }\r\n\r\n  updateHiveSecion(hiveSection: HiveSection): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${hiveSection.id}`, hiveSection);\r\n  }\r\n\r\n  deleteHiveSection(hiveSectionId: number): Observable<Object> {\r\n    return this.http.delete<Object>(`${this.url}${hiveSectionId}`);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Hive } from '../models/hive';\r\nimport { HiveListItem } from '../models/hive-list-item';\r\nimport { HiveSectionListItem } from '../models/hive-section-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HiveService {\r\n  private url = environment.apiUrl + 'api/hives/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getHives(): Observable<Array<HiveListItem>> {\r\n    return this.http.get<Array<HiveListItem>>(this.url);\r\n  }\r\n\r\n  getHive(hiveId: number): Observable<Hive> {\r\n    return this.http.get<Hive>(`${this.url}${hiveId}`);\r\n  }\r\n\r\n  getHiveSections(hiveId: number): Observable<Array<HiveSectionListItem>> {\r\n    return this.http.get<Array<HiveSectionListItem>>(`${this.url}${hiveId}/sections`);\r\n  }\r\n\r\n  addHive(hive: Hive): Observable<Hive> {\r\n    return this.http.post<Hive>(`${this.url}`, hive);\r\n  }\r\n\r\n  updateHive(hive: Hive): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${hive.id}`, hive);\r\n  }\r\n\r\n  deleteHive(hiveId: number): Observable<Object> {\r\n    return this.http.delete<Object>(`${this.url}${hiveId}`);\r\n  }\r\n\r\n  setHiveStatus(hiveId: number, deletedStatus: boolean): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${hiveId}/status/${deletedStatus}`, null);\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron\\\">\\r\\n  <h1 class=\\\"display-4\\\"><span style=\\\"color: blueviolet; font-weight: bold; font-family: Arial, Helvetica, sans-serif; margin-right:0.1em; border: blueviolet solid 1px; padding: 6px;\\\">K</span>KatlaSport</h1>\\r\\n  <p class=\\\"lead\\\">Welcome to KatlaSport management console.</p>\\r\\n  <hr class=\\\"my-4\\\">\\r\\n  <p>Please, click on \\\"Learn more\\\" button to get more information about this project.</p>\\r\\n  <a class=\\\"btn btn-primary btn-lg\\\" href=\\\"https://github.com/epam-lab/katla\\\" role=\\\"button\\\">Learn more</a>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  templateUrl: './main-page.component.html',\r\n  styleUrls: ['./main-page.component.css']\r\n})\r\nexport class MainPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Manager Editor</h2>\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #managerForm=\\\"ngForm\\\">\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\n      <label for=\\\"idLabel\\\">ID</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"manager.id\\\" name=\\\"id\\\"\\n        #id=\\\"ngModel\\\" readonly>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Manager Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\"\\n        required [(ngModel)]=\\\"manager.name\\\" name=\\\"name\\\" #name=\\\"ngModel\\\">\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"name.errors.required\\\">Manager Name is required.</div>\\n        <div *ngIf=\\\"name.errors.minlength\\\">Manager Name must be at least 4 characters long.</div>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"phone\\\" id=\\\"phoneLabel\\\">Manager Phone</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"phone\\\" aria-describedby=\\\"phoneLabel\\\" maxlength=\\\"12\\\" required\\n        [(ngModel)]=\\\"manager.phone\\\" name=\\\"phone\\\" #phone=\\\"ngModel\\\">\\n      <div *ngIf=\\\"phone.invalid && (phone.dirty || phone.touched)\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"phone.errors.required\\\">Manager Phone is required.</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\n      <label for=\\\"image\\\" id=\\\"imageLabel\\\">Image</label>\\n      <input type=\\\"file\\\" (change)=\\\"onFileSelected($event)\\\" class=\\\"form-control\\\" id=\\\"image\\\"\\n        aria-describedby=\\\"imageLabel\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"bossManager\\\" id=\\\"bossManagerLabel\\\">Boss Manager</label>\\n      <select class=\\\"custom-select\\\" [(ngModel)]=\\\"selectedBossManagerId\\\" id=\\\"bossManager\\\" aria-describedby=\\\"bossManagerLabel\\\"\\n        #product=\\\"ngModel\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        <option *ngFor=\\\"let bossManager of bossManagers\\\" [ngValue]=\\\"bossManager.id\\\">{{bossManager.name}}</option>\\n      </select>\\n    </div>\\n\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\n      </div>\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\n      </div>\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed && !manager.isDeleted\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDelete()\\\">Delete</button>\\n      </div>\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Purge group\\\" *ngIf=\\\"existed && manager.isDeleted\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onUndelete()\\\">Undelete</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"onPurge()\\\">Purge</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ManagerService } from '../services/manager.service';\nimport { Manager } from '../models/manager';\n\n@Component({\n  selector: 'app-manager-form-component',\n  templateUrl: './manager-form.component.html',\n  styleUrls: ['./manager-form.component.css']\n})\nexport class ManagerFormComponent implements OnInit {\n  existed = false;\n  bossManagers: Manager[];\n  manager = new Manager(0, \"\", \"\", 0, false, \"\");\n  selectedImageFile: File;\n  curentManagerId: number;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private managerService: ManagerService\n  ) { }\n\n  ngOnInit() {\n    this.managerService.getBossMamagers().subscribe(m => this.bossManagers = m);\n    this.route.params.subscribe(p => {\n      if (p['id'] === undefined) \n        return;\n\n      this.managerService.getManager(p['id']).subscribe(h => this.manager = h);\n    });\n    this.existed = true;\n    this.curentManagerId = this.bossManagers.indexOf(this.manager);\n    this.bossManagers.splice(this.curentManagerId);\n  }\n\n  onFileSelected(event) {\n    this.selectedImageFile = event.target.files[0];\n  }\n\n  navigateToManagers() {\n    this.router.navigate(['/managers']);\n  }\n\n  onCancel() {\n    this.navigateToManagers();\n  }\n\n  onSubmit() {\n    if (this.existed) {\n      this.managerService.updateManager(this.manager);\n      if (this.selectedImageFile) {\n        this.managerService.uploadNewImageFile(this.manager.id, this.selectedImageFile).subscribe(h => this.navigateToManagers());\n      }\n    } else {\n      this.managerService.addManager(this.manager).subscribe(h => this.navigateToManagers());\n    }\n  }\n\n  onDelete() {\n    if (this.manager) {\n      this.managerService.setManagerStatus(this.manager.id, true).subscribe(c => this.manager.isDeleted = true);\n    }\n  }\n\n  onUndelete() {\n    if (this.manager) {\n      this.managerService.setManagerStatus(this.manager.id, false).subscribe(c => this.manager.isDeleted = false);\n    }\n  }\n\n  onPurge() {\n    if (this.manager) {\n      this.managerService.deleteManager(this.manager.id).subscribe(h => this.navigateToManagers());\n    }\n  }\n\n}\n","module.exports = \"img{\\r\\n    width: 200px;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Manager List</h2>\\n  <table class=\\\"table table-nonfluid\\\">\\n    <thead>\\n      <th scope=\\\"col\\\">#</th>\\n      <th scope=\\\"col\\\">Name</th>\\n      <th scope=\\\"col\\\">Phone</th>\\n      <th scope=\\\"col\\\">Image</th>\\n      <th scope=\\\"col\\\"></th>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let manager of managers\\\">\\n        <th scope=\\\"row\\\">{{manager.id}}</th>\\n        <th scope=\\\"row\\\">{{manager.name}}</th>\\n        <th scope=\\\"row\\\">{{manager.phone}}</th>\\n        <th scope=\\\"row\\\"><img src= \\\"{{manager.photoUrl}}\\\" alt=\\\"photo\\\"></th>\\n        <td>\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Hive action buttons\\\"\\n            style=\\\"display: block; white-space:nowrap;\\\">\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"!manager.isDeleted\\\"\\n              (click)=\\\"onDelete(manager.id)\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger\\\">Delete</button>\\n            </div>\\n            <div *ngIf=\\\"manager.isDeleted\\\" class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\"\\n              (click)=\\\"onRestore(manager.id)\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Restore</button>\\n            </div>\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"View group\\\">\\n              <button routerLink=\\\"/managers\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View\\n                sections</button>\\n            </div>\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\n              <button routerLink=\\\"/manager/{{manager.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\n            </div>\\n          </span>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"New group\\\">\\n      <button routerLink=\\\"/manager\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">New Manager</button>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ManagerListItem } from '../models/manager-list-item';\nimport { ManagerService } from '../services/manager.service';\n\n\n@Component({\n  selector: 'app-manager-list',\n  templateUrl: './manager-list.component.html',\n  styleUrls: ['./manager-list.component.css']\n})\nexport class ManagerListComponent implements OnInit {\n  managers: ManagerListItem[];\n\n  constructor(private managerService: ManagerService) { }\n\n  ngOnInit() {\n    this.managerService.getMamagers().subscribe(m=> this.managers = m);\n  }\n\n  onDelete(managerId: number) {\n    var manager = this.managers.find(h => h.id == managerId);\n    if (manager) {\n      this.managerService.setManagerStatus(managerId, true).subscribe(c => manager.isDeleted = true);\n    }\n  }\n\n  onRestore(managerId: number) {\n    var manager = this.managers.find(h => h.id == managerId);\n    if (manager) {\n      this.managerService.setManagerStatus(managerId, true).subscribe(c => manager.isDeleted = false);\n    }\n  }\n}\n","export class Manager {\r\n    constructor(\r\n        public id: number,\r\n        public phone: string,\r\n        public name: string,\r\n        public parentId: number,\r\n        public isDeleted: boolean,\r\n        public photoUrl: string\r\n    ) { }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'environments/environment';\nimport { Observable, from } from 'rxjs';\nimport { Manager } from '../models/manager';\nimport { ManagerListItem } from '../models/manager-list-item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ManagerService {\n  private url = environment.apiUrl + 'api/managers';\n\n  constructor(private http: HttpClient) { }\n\n  getMamagers(): Observable<Array<ManagerListItem>> {\n    return this.http.get<Array<ManagerListItem>>(this.url);\n  }\n\n  getBossMamagers(): Observable<Array<Manager>> {\n    return this.http.get<Array<Manager>>(this.url);\n  }\n\n  getManager(managerId: number): Observable<Manager> {\n    return this.http.get<Manager>(`${this.url}/${managerId}`);\n  }\n\n  addManager(manager: Manager): Observable<Manager> {\n    return this.http.post<Manager>(`${this.url}`, manager);\n  }\n\n  updateManager(manager: Manager): Observable<Object> {\n    return this.http.put<Object>(`${this.url}/${manager.id}`, manager);\n  }\n\n  deleteManager(managerId: number): Observable<Object> {\n    return this.http.delete<Object>(`${this.url}/${managerId}`);\n  }\n\n  setManagerStatus(managerId: number, deletedStatus: boolean): Observable<Object> {\n    return this.http.put<Object>(`${this.url}/${managerId}/status/${deletedStatus}`, null);\n  }\n\n  uploadNewImageFile(managerId: number, file: File) {\n    const fd = new FormData();\n    fd.append('image', file, file.name);\n    return this.http.post<Object>(`${this.url}/${managerId}/uploadImage`, fd);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Order Creator</h2>\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #orderCreatorrForm=\\\"ngForm\\\">\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"product\\\" id=\\\"productLabel\\\">Product</label>\\n      <select class=\\\"custom-select\\\" [(ngModel)]=\\\"selectedProductId\\\" id=\\\"product\\\" aria-describedby=\\\"productLabel\\\"\\n        #product=\\\"ngModel\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        <option *ngFor=\\\"let product of products\\\" [ngValue]=\\\"product.id\\\">{{product.name}}</option>\\n      </select>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"amount\\\" id=\\\"amountLabel\\\">Product Amount</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"amount\\\" aria-describedby=\\\"amountLabel\\\" required\\n        [(ngModel)]=\\\"order.productAmount\\\" name=\\\"amount\\\" #amount=\\\"ngModel\\\">\\n      <div *ngIf=\\\"amount.invalid && (amount.dirty || amount.touched)\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"amount.errors.required\\\">Product Amount is required.</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"description\\\" id=\\\"descriptionLabel\\\">Order Description</label>\\n      <textarea class=\\\"form-control\\\" id=\\\"description\\\" aria-describedby=\\\"descriptionLabel\\\" rows=\\\"4\\\" maxlength=\\\"300\\\"\\n        [(ngModel)]=\\\"order.description\\\" name=\\\"description\\\" #description=\\\"ngModel\\\">\\n      </textarea>\\n    </div>\\n\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\n      </div>\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from '../services/order.service';\nimport { OrderListItem } from '../models/order-list-item';\nimport { ProductListItem } from '../../product-management/models/product-list-item';\nimport { ProductService } from '../../product-management/services/product.service';\n\n@Component({\n  selector: 'app-order-customer-form',\n  templateUrl: './order-customer-form.component.html',\n  styleUrls: ['./order-customer-form.component.css']\n})\nexport class OrderCustomerFormComponent implements OnInit {\n  order = new OrderListItem(0, \"\", \"\", 0, \"\", 0, 1, 0);\n  products: ProductListItem[];\n  customerId: number;\n  selectedProductId: number;\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private productService: ProductService\n  ) { }\n\n  ngOnInit() {\n    this.productService.getProducts().subscribe(p => this.products = p);\n    this.route.params.subscribe(p => {\n      this.customerId = p['customerId'];\n    })\n    this.order.customerId = this.customerId;\n  }\n\n  onSubmit() {\n    this.order.productId = this.selectedProductId;\n    this.orderService.addOrder(this.order).subscribe(o => this.navigateToCustomerOrders());\n  }\n\n  onCancel() {\n    this.navigateToCustomerOrders();\n  }\n\n  navigateToCustomerOrders() {\n    this.router.navigateByUrl(`/customers/${this.customerId}/orders`);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Adding product to order</h2>\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #orderProductCreatorForm=\\\"ngForm\\\">\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"product\\\" id=\\\"productLabel\\\">Product</label>\\n      <select class=\\\"custom-select\\\" [(ngModel)]=\\\"selectedProductId\\\" id=\\\"product\\\" aria-describedby=\\\"productLabel\\\"\\n        #product=\\\"ngModel\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n        <option *ngFor=\\\"let product of products\\\" [ngValue]=\\\"product.id\\\">{{product.name}}</option>\\n      </select>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"amount\\\" id=\\\"amountLabel\\\">Product Amount</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"amount\\\" aria-describedby=\\\"amountLabel\\\" required\\n        [(ngModel)]=\\\"orderProduct.amount\\\" name=\\\"amount\\\" #amount=\\\"ngModel\\\">\\n      <div *ngIf=\\\"amount.invalid && (amount.dirty || amount.touched)\\\" class=\\\"alert alert-danger\\\">\\n        <div *ngIf=\\\"amount.errors.required\\\">Product Amount is required.</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\n      </div>\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from '../services/order.service';\nimport { OrderProductListItem } from '../models/order-product-list-item';\nimport { ProductListItem } from '../../product-management/models/product-list-item';\nimport { ProductService } from '../../product-management/services/product.service';\n\n@Component({\n  selector: 'app-order-product-form',\n  templateUrl: './order-product-form.component.html',\n  styleUrls: ['./order-product-form.component.css']\n})\nexport class OrderProductFormComponent implements OnInit {\n  orderProduct = new OrderProductListItem(0, \"\", 1, 0);\n  products: ProductListItem[];\n  selectedProductId: number;\n  orderId: number;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private productService: ProductService\n  ) { }\n\n  ngOnInit() {\n    this.productService.getProducts().subscribe(p => this.products = p);\n\n    this.route.params.subscribe(p => {\n      this.orderId = p['orderId'];\n    })\n  }\n\n  onSubmit() {\n    this.orderProduct.itemId = this.selectedProductId;\n    this.orderService.addProtuctToOrder(this.orderId, this.orderProduct).subscribe(o => this.navigateToOrderProductList());\n  }\n\n  onCancel() {\n    this.navigateToOrderProductList();\n  }\n\n  navigateToOrderProductList() {\n    this.router.navigateByUrl(`orders/${this.orderId}/products`);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Customer Orders List</h2>\\n  <table class=\\\"table table-nofluid\\\">\\n    <thead>\\n      <th scope=\\\"col\\\">#</th>\\n      <th scope=\\\"col\\\">Status</th>\\n      <th scope=\\\"col\\\">Description</th>\\n      <th scope=\\\"col\\\">Total Cost</th>\\n      <th scope=\\\"col\\\"></th>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let order of orders\\\">\\n        <th scope=\\\"row\\\">{{order.id}}</th>\\n        <td>{{order.orderStatus}}</td>\\n        <td>{{order.description}}</td>\\n        <td>{{order.totalCost}}</td>\\n        <td>\\n          <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product action buttons\\\">\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View category group\\\">\\n              <button routerLink=\\\"/orders/{{order.id}}/products\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View products into order</button>\\n            </div>\\n          </div>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\n    <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Back group\\\">\\n      <button routerLink=\\\"/customers\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Back</button>\\n    </div>\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Add group\\\">\\n      <button routerLink=\\\"/customers/{{customerId}}/order\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Add order</button>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from '../services/order.service';\nimport { OrderListItem } from '../models/order-list-item';\n\n@Component({\n  selector: 'app-customer-orders',\n  templateUrl: './customer-orders-list.component.html',\n  styleUrls: ['./customer-orders-list.component.css']\n})\nexport class CustomerOrdersListComponent implements OnInit {\n  orders: OrderListItem[];\n  customerId: number;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService\n  ) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(p => {\n      this.customerId = p['customerId'];\n    })\n    this.orderService.getOrdersByCustomerId(this.customerId).subscribe(o => this.orders = o);\n  }\n\n  navigateToSections() {\n    this.router.navigateByUrl(`customer/${this.customerId}/sections`);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>Order List</h2>\\n  <table class=\\\"table table-nofluid\\\">\\n    <thead>\\n      <th scope=\\\"col\\\">#</th>\\n      <th scope=\\\"col\\\">Status</th>\\n      <th scope=\\\"col\\\">Description</th>\\n      <th scope=\\\"col\\\">Total Cost</th>\\n      <th scope=\\\"col\\\"></th>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let order of orders\\\">\\n        <th scope=\\\"row\\\">{{order.id}}</th>\\n        <td>{{order.orderStatus}}</td>\\n        <td>{{order.description}}</td>\\n        <td>{{order.totalCost}}</td>\\n        <td>\\n          <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product action buttons\\\">\\n            <!-- <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-warning\\\">Deleted</button>\\n            </div> -->\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View category group\\\">\\n              <button routerLink=\\\"/orders/{{order.id}}/products\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View products in order</button>\\n            </div>\\n          </div>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from '../services/order.service';\nimport { OrderListItem } from '../models/order-list-item';\n\n@Component({\n  selector: 'app-order-list',\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.css']\n})\nexport class OrderListComponent implements OnInit {\n\n  orders: OrderListItem[];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService\n  ) { }\n\n  ngOnInit() {\n    this.orderService.getOrders().subscribe(o => this.orders = o);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <h2>Order Products List</h2>\\r\\n    <table class=\\\"table table-nofluid\\\">\\r\\n      <thead>\\r\\n        <th scope=\\\"col\\\">#</th>\\r\\n        <th scope=\\\"col\\\">Product Name</th>\\r\\n        <th scope=\\\"col\\\">Product Amount</th>\\r\\n        <th scope=\\\"col\\\">Product Price</th>\\r\\n        <th scope=\\\"col\\\"></th>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr *ngFor=\\\"let product of products\\\">\\r\\n          <th scope=\\\"row\\\">{{product.itemId}}</th>\\r\\n          <td>{{product.productName}}</td>\\r\\n          <td>{{product.amount}}</td>\\r\\n          <td>{{product.productPrice}}</td>\\r\\n          <td>\\r\\n            <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product action buttons\\\">\\r\\n              <!-- <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-warning\\\">Deleted</button>\\r\\n              </div> -->\\r\\n              <!-- <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View category group\\\">\\r\\n                <button routerLink=\\\"/orders/{{orderId}}/products\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View category products</button>\\r\\n              </div> -->\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n        <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Back group\\\">\\r\\n          <button routerLink=\\\"/customers\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Back</button>\\r\\n        </div>\\r\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Add group\\\">\\r\\n          <button routerLink=\\\"/orders/{{orderId}}/product\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Add products to order</button>\\r\\n        </div>\\r\\n      </div>\\r\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from '../services/order.service';\nimport { OrderProductListItem } from '../models/order-product-list-item'\nimport { OrderListItem } from '../models/order-list-item';\nimport { from } from 'rxjs';\n\n@Component({\n  selector: 'app-order-products-info-list',\n  templateUrl: './order-products-info-list.component.html',\n  styleUrls: ['./order-products-info-list.component.css']\n})\nexport class OrderProductsInfoListComponent implements OnInit {\n  products: OrderProductListItem[];\n  orderId: number;\n  order: OrderListItem;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService\n  ) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(p => {\n      this.orderId = p['orderId'];\n    })\n\n    //this.orderService.getOrder(this.orderId).subscribe(o => this.order = o);\n    this.orderService.getProductsInfo(this.orderId).subscribe(o => this.products = o);\n  }\n\n  navigateToBack(){\n    \n  }\n}\n","export class OrderListItem {\r\n    constructor(\r\n        public id: number,\r\n        public orderStatus: string,\r\n        public totalCost: string,\r\n        public managerId: number,\r\n        public description: string,\r\n        public customerId: number,\r\n        public productAmount: number,\r\n        public productId: number\r\n    ) { }\r\n}","export class OrderProductListItem{\r\n    constructor(\r\n        public itemId: number,\r\n        public productName: string,\r\n        public amount: number,\r\n        public productPrice: number\r\n    ){}\r\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'environments/environment';\nimport { Observable, from } from 'rxjs';\nimport { OrderListItem } from '../models/order-list-item';\nimport { OrderProductListItem } from '../models/order-product-list-item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private url = environment.apiUrl + 'api/orders';\n\n  constructor(private http: HttpClient) { }\n\n  getOrders(): Observable<Array<OrderListItem>> {\n    return this.http.get<Array<OrderListItem>>(this.url);\n  }\n\n  getOrdersByCustomerId(customerId: number): Observable<Array<OrderListItem>> {\n    return this.http.get<Array<OrderListItem>>(`${this.url}/${customerId}/orders`);\n  }\n\n  addOrder(order: OrderListItem): Observable<OrderListItem> {\n    return this.http.post<OrderListItem>(this.url, order);\n  }\n\n  getProductsInfo(orderId: number): Observable<Array<OrderProductListItem>> {\n    return this.http.get<Array<OrderProductListItem>>(`${this.url}/${orderId}/products`);\n  }\n\n  getOrder(orderId: number): Observable<OrderListItem> {\n    return this.http.get<OrderListItem>(`${this.url}/${orderId}`);\n  }\n\n  addProtuctToOrder(orderId: number, productItem: OrderProductListItem): Observable<OrderProductListItem> {\n    return this.http.put<OrderProductListItem>(`${this.url}/${orderId}`, productItem);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product Category Editor</h2>\\r\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #productCategoryForm=\\\"ngForm\\\">\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"idLabel\\\">ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"productCategory.id\\\" name=\\\"id\\\" #id=\\\"ngModel\\\"\\r\\n        readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Product Category Name</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\" required [(ngModel)]=\\\"productCategory.name\\\"\\r\\n        name=\\\"name\\\" #name=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"name.errors.required\\\">Product Category Name is required.</div>\\r\\n        <div *ngIf=\\\"name.errors.minlength\\\">Product Category Name must be at least 4 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"code\\\" id=\\\"codeLabel\\\">Product Category Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"code\\\" aria-describedby=\\\"codeLabel\\\" minlength=\\\"5\\\" maxlength=\\\"5\\\" required [(ngModel)]=\\\"productCategory.code\\\"\\r\\n        name=\\\"code\\\" #code=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"code.invalid && (code.dirty || code.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"code.errors.required\\\">Product Category Code is required.</div>\\r\\n        <div *ngIf=\\\"code.errors.minlength\\\">Product Category code must be at least 5 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"description\\\" id=\\\"descriptionLabel\\\">Product Category Description</label>\\r\\n      <textarea class=\\\"form-control\\\" id=\\\"description\\\" aria-describedby=\\\"descriptionLabel\\\" rows=\\\"4\\\" maxlength=\\\"300\\\" [(ngModel)]=\\\"productCategory.description\\\"\\r\\n        name=\\\"description\\\" #description=\\\"ngModel\\\">\\r\\n      </textarea>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"lastUpdated\\\" id=\\\"lastUpdatedLabel\\\">Last Update</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastUpdated\\\" aria-describedby=\\\"lastUpdatedLabel\\\" required [(ngModel)]=\\\"productCategory.lastUpdated\\\"\\r\\n        name=\\\"lastUpdated\\\" #lastUpdated=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed && !productCategory.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDelete()\\\">Delete</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Purge group\\\" *ngIf=\\\"existed && productCategory.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onUndelete()\\\">Undelete</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"onPurge()\\\">Purge</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ProductCategory } from '../models/product-category';\r\nimport { ProductCategoryService } from '../services/product-category.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-form',\r\n  templateUrl: './product-category-form.component.html',\r\n  styleUrls: ['./product-category-form.component.css']\r\n})\r\nexport class ProductCategoryFormComponent implements OnInit {\r\n\r\n  productCategory = new ProductCategory(0, \"My New Category\", \"CATE1\", \"Category description\", false, \"\");\r\n  existed = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productCategoryService: ProductCategoryService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      if (p['id'] === undefined) return;\r\n      this.productCategoryService.getProductCategory(p['id']).subscribe(c => this.productCategory = c);\r\n      this.existed = true;\r\n    });\r\n  }\r\n\r\n  navigateToCategories() {\r\n    this.router.navigate(['/categories']);\r\n  }\r\n\r\n  onCancel() {\r\n    this.navigateToCategories();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.existed) {\r\n      this.productCategoryService.updateProductCategory(this.productCategory).subscribe(c => this.navigateToCategories());\r\n    } else {\r\n      this.productCategoryService.addProductCategory(this.productCategory).subscribe(c => this.navigateToCategories());\r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n    this.productCategoryService.setProductCategoryStatus(this.productCategory.id, true).subscribe(c => this.productCategory.isDeleted = true);\r\n  }\r\n\r\n  onUndelete() {\r\n    this.productCategoryService.setProductCategoryStatus(this.productCategory.id, false).subscribe(c => this.productCategory.isDeleted = false);\r\n  }\r\n\r\n  onPurge() {\r\n    this.productCategoryService.deleteProductCategory(this.productCategory.id).subscribe(c => this.navigateToCategories());\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product Editor</h2>\\r\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #productEditorForm=\\\"ngForm\\\">\\r\\n    <div class=\\\"form-group\\\" *ngIf=\\\"existed\\\">\\r\\n      <label for=\\\"idLabel\\\">ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"product.id\\\" name=\\\"id\\\" #id=\\\"ngModel\\\"\\r\\n        readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Product Name</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\" required [(ngModel)]=\\\"product.name\\\"\\r\\n        name=\\\"name\\\" #name=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"name.errors.required\\\">Product Name is required.</div>\\r\\n        <div *ngIf=\\\"name.errors.minlength\\\">Product Name must be at least 4 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"code\\\" id=\\\"codeLabel\\\">Product Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"code\\\" aria-describedby=\\\"codeLabel\\\" minlength=\\\"5\\\" maxlength=\\\"5\\\" required [(ngModel)]=\\\"product.code\\\"\\r\\n        name=\\\"code\\\" #code=\\\"ngModel\\\">  \\r\\n      <div *ngIf=\\\"code.invalid && (code.dirty || code.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"code.errors.required\\\">Product Code is required.</div>\\r\\n        <div *ngIf=\\\"code.errors.minlength\\\">Product Code must be at least 5 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"category\\\" id=\\\"categoryLabel\\\">Product Category</label>\\r\\n      <select class=\\\"custom-select\\\" [(ngModel)]=\\\"product.id\\\" id=\\\"category\\\" aria-describedby=\\\"categoryLabel\\\" #category=\\\"ngModel\\\"\\r\\n        [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n        <option *ngFor=\\\"let category of productCategories\\\" [ngValue]=\\\"category.id\\\">{{category.name}}</option>\\r\\n      </select>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"description\\\" id=\\\"descriptionLabel\\\">Product Description</label>\\r\\n      <textarea class=\\\"form-control\\\" id=\\\"description\\\" aria-describedby=\\\"descriptionLabel\\\" rows=\\\"4\\\" maxlength=\\\"300\\\" [(ngModel)]=\\\"product.description\\\"\\r\\n        name=\\\"description\\\" #description=\\\"ngModel\\\">\\r\\n      </textarea>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"manufacturerCode\\\" id=\\\"manufacturerCodeLabel\\\">Manufacturer Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"manufacturerCode\\\" aria-describedby=\\\"manufacturerCodeLabel\\\" minlength=\\\"4\\\" maxlength=\\\"10\\\"\\r\\n        required [(ngModel)]=\\\"product.manufacturerCode\\\" name=\\\"manufacturerCode\\\" #manufacturerCode=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"manufacturerCode.invalid && (manufacturerCode.dirty || manufacturerCode.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"manufacturerCode.errors.required\\\">Manufacturer Code is required.</div>\\r\\n        <div *ngIf=\\\"manufacturerCode.errors.minlength\\\">Manufacturer Code must be at least 10 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"price\\\" id=\\\"priceLabel\\\">Product Price</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"price\\\" aria-describedby=\\\"priceLabel\\\" required [(ngModel)]=\\\"product.price\\\" name=\\\"price\\\"\\r\\n        #price=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"price.invalid && (price.dirty || price.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"price.errors.required\\\">Product Price is required.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"lastUpdated\\\">Last Update</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastUpdated\\\" aria-describedby=\\\"lastUpdatedLabel\\\" required [(ngModel)]=\\\"product.lastUpdated\\\"\\r\\n        name=\\\"lastUpdated\\\" #lastUpdated=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed && !product.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDelete()\\\">Delete</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Purge group\\\" *ngIf=\\\"existed && product.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onUndelete()\\\">Undelete</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"onPurge()\\\">Purge</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Product } from '../models/product';\r\nimport { ProductCategoryListItem } from '../models/product-category-list-item';\r\nimport { ProductCategoryService } from '../services/product-category.service';\r\nimport { ProductService } from '../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-form',\r\n  templateUrl: './product-form.component.html',\r\n  styleUrls: ['./product-form.component.css']\r\n})\r\nexport class ProductFormComponent implements OnInit {\r\n\r\n  product = new Product(0, \"\", \"\", 0, \"\", \"\", 0, false, \"\");\r\n  existed = false;\r\n  categoryId: number;\r\n  productCategories: ProductCategoryListItem[];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService,\r\n    private productCategoryService: ProductCategoryService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.productCategoryService.getProductCategories().subscribe(c => this.productCategories = c);\r\n    this.route.params.subscribe(p => {\r\n      this.categoryId = p['categoryId'];\r\n      if (p['id'] === undefined) return;\r\n      this.productService.getProduct(p['id']).subscribe(c => this.product = c);\r\n      this.existed = true;\r\n    });\r\n  }\r\n\r\n  navigateTo() {\r\n    if (this.categoryId === undefined) {\r\n      this.router.navigate(['/products']);\r\n    } else {\r\n      this.router.navigate([`/category/${this.categoryId}/products`]);\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.navigateTo();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.existed) {\r\n      this.productService.updateProduct(this.product).subscribe(p => this.navigateTo());\r\n    } else {\r\n      this.product.сategoryId = this.categoryId;\r\n      this.productService.addProduct(this.product).subscribe(p => this.navigateTo());\r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n  }\r\n\r\n  onUndelete() {\r\n  }\r\n\r\n  onPurge() {\r\n    this.productService.deleteProduct(this.product.id).subscribe(p => this.navigateTo());\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product Category List</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <!-- TODO STEP 4 - Add column header here. -->\\r\\n      <th scope=\\\"col\\\">Products</th>\\r\\n      <th scope=\\\"col\\\">Last Update</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let productCategory of productCategories\\\">\\r\\n        <th scope=\\\"row\\\">{{productCategory.id}}</th>\\r\\n        <td>{{productCategory.code}}</td>\\r\\n        <td>{{productCategory.name}}</td>\\r\\n        <!-- TODO STEP 4 - Add row cell here. -->\\r\\n        <td>{{productCategory.productCount}}</td>\\r\\n        <td>{{productCategory.lastUpdated}}</td>\\r\\n        <td>\\r\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product category action buttons\\\" style=\\\"display: block; white-space:nowrap;\\\">\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"productCategory.isDeleted\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-warning\\\">Deleted</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View group\\\">\\r\\n              <button routerLink=\\\"/category/{{productCategory.id}}/products\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View products</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\r\\n              <button routerLink=\\\"/category/{{productCategory.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n      <button routerLink=\\\"/category\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">New Product Category</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ProductCategoryListItem } from '../models/product-category-list-item';\r\nimport { ProductCategoryService } from '../services/product-category.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-list',\r\n  templateUrl: './product-category-list.component.html',\r\n  styleUrls: ['./product-category-list.component.css']\r\n})\r\nexport class ProductCategoryListComponent implements OnInit {\r\n\r\n  selectedProductCategory: ProductCategoryListItem;\r\n  productCategories: ProductCategoryListItem[];\r\n\r\n  constructor(private productCategoryService: ProductCategoryService) { }\r\n\r\n  ngOnInit() {\r\n    this.getProductCategories();\r\n  }\r\n\r\n  onSelect(productCategory: ProductCategoryListItem): void {\r\n    this.selectedProductCategory = productCategory;\r\n  }\r\n\r\n  getProductCategories(): void {\r\n    this.productCategoryService.getProductCategories().subscribe(c => this.productCategories = c);\r\n  }\r\n\r\n  enableProductCategory(): void {\r\n  }\r\n\r\n  disableProductCategory(): void {\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Products for Category</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <th scope=\\\"col\\\">Last Update</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let product of products\\\">\\r\\n        <th scope=\\\"row\\\">{{product.id}}</th>\\r\\n        <td>{{product.code}}</td>\\r\\n        <td>{{product.name}}</td>\\r\\n        <td>{{product.lastUpdated}}</td>\\r\\n        <td>\\r\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product category action buttons\\\" style=\\\"display: block; white-space:nowrap;\\\">\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete product\\\" *ngIf=\\\"product.isDeleted\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger\\\">Deleted</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit product\\\">\\r\\n              <button routerLink=\\\"/category/{{this.categoryId}}/product/{{product.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Back group\\\">\\r\\n      <button routerLink=\\\"/categories\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View categories</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ProductCategoryProductListItem } from '../models/product-category-product-list-item';\r\nimport { ProductService } from '../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-product-list',\r\n  templateUrl: './product-category-product-list.component.html',\r\n  styleUrls: ['./product-category-product-list.component.css']\r\n})\r\nexport class ProductCategoryProductListComponent implements OnInit {\r\n\r\n  categoryId: number;\r\n  products: ProductCategoryProductListItem[];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      this.categoryId = p['id'];\r\n      this.productService.getCategoryProducts(p['id']).subscribe(p => this.products = p);\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product List</h2>\\r\\n  <table class=\\\"table table-nofluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <th scope=\\\"col\\\">Category</th>\\r\\n      <th scope=\\\"col\\\">Last Update</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let product of products\\\">\\r\\n        <th scope=\\\"row\\\">{{product.id}}</th>\\r\\n        <td>{{product.code}}</td>\\r\\n        <td>{{product.name}}</td>\\r\\n        <td>{{product.categoryCode}}</td>\\r\\n        <td>{{product.lastUpdated}}</td>\\r\\n        <td>\\r\\n          <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product action buttons\\\">\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"product.isDeleted\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-warning\\\">Deleted</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View category group\\\">\\r\\n              <button routerLink=\\\"/category/{{product.categoryId}}/products\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View category products</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\r\\n              <button routerLink=\\\"/product/{{product.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Ordere product\\\">\\r\\n              <button routerLink=\\\"/order\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Order Product</button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ProductListItem } from '../models/product-list-item';\r\nimport { ProductService } from '../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  templateUrl: './product-list.component.html',\r\n  styleUrls: ['./product-list.component.css']\r\n})\r\nexport class ProductListComponent implements OnInit {\r\n\r\n  products: ProductListItem[];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.productService.getProducts().subscribe(p => this.products = p);\r\n  }\r\n}\r\n","export class ProductCategory {\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public code: string,\r\n        public description: string,\r\n        public isDeleted: boolean,\r\n        public lastUpdated: string\r\n    ) { }\r\n}\r\n","export class Product {\r\n    constructor(\r\n        public id: number,\r\n        public code: string,\r\n        public name: string,\r\n        public сategoryId: number,\r\n        public description: string,\r\n        public manufacturerCode: string,\r\n        public price: number,\r\n        public isDeleted: boolean,\r\n        public lastUpdated: string\r\n    ) { }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { ProductCategory } from '../models/product-category';\r\nimport { ProductCategoryListItem } from '../models/product-category-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductCategoryService {\r\n  private url = environment.apiUrl + 'api/categories/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProductCategories(): Observable<Array<ProductCategoryListItem>> {\r\n    return this.http.get<Array<ProductCategoryListItem>>(this.url);\r\n  }\r\n\r\n  getProductCategory(productCategoryId: number): Observable<ProductCategory> {\r\n    return this.http.get<ProductCategory>(`${this.url}${productCategoryId}`);\r\n  }\r\n\r\n  addProductCategory(productCategory: ProductCategory): Observable<ProductCategory> {\r\n    return this.http.post<ProductCategory>(this.url, productCategory);\r\n  }\r\n\r\n  updateProductCategory(productCategory: ProductCategory): Observable<ProductCategory> {\r\n    return this.http.put<ProductCategory>(`${this.url}${productCategory.id}`, productCategory);\r\n  }\r\n\r\n  deleteProductCategory(productCategoryId: number): Observable<Object> {\r\n    return this.http.delete<Object>(`${this.url}${productCategoryId}`);\r\n  }\r\n\r\n  setProductCategoryStatus(productCategoryId: number, deletedStatus: boolean): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${productCategoryId}/status/${deletedStatus}`, null);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../models/product';\r\nimport { ProductCategoryProductListItem } from '../models/product-category-product-list-item';\r\nimport { ProductListItem } from '../models/product-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private url = environment.apiUrl + 'api/products/';\r\n  private categoryUrl = environment.apiUrl + 'api/categories/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProducts(): Observable<Array<ProductListItem>> {\r\n    return this.http.get<Array<ProductListItem>>(this.url);\r\n  }\r\n\r\n  getProduct(productId: number): Observable<Product> {\r\n    return this.http.get<Product>(`${this.url}${productId}`);\r\n  }\r\n\r\n  getCategoryProducts(productCategoryId: number): Observable<Array<ProductCategoryProductListItem>> {\r\n    return this.http.get<Array<ProductCategoryProductListItem>>(`${this.categoryUrl}${productCategoryId}/products`);\r\n  }\r\n\r\n  addProduct(product: Product): Observable<Product> {\r\n    return this.http.post<Product>(`${this.url}`, product);\r\n  }\r\n\r\n  updateProduct(product: Product): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${product.id}`, product);\r\n  }\r\n\r\n  deleteProduct(productId: number): Observable<Object> {\r\n    return this.http.delete<Object>(`${this.url}${productId}`);\r\n  }\r\n}\r\n","import 'zone.js/dist/zone-error';\r\n\r\nexport const environment = {\r\n  production: false,\r\n  //apiUrl: 'https://katla-sport-back-end.azurewebsites.net/',\r\n  apiUrl: 'http://localhost:56952/'\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}