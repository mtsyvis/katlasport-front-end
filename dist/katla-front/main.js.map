{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/hive-management/forms/hive-form.component.css","webpack:///./src/app/hive-management/forms/hive-form.component.html","webpack:///./src/app/hive-management/forms/hive-form.component.ts","webpack:///./src/app/hive-management/forms/hive-section-form.component.css","webpack:///./src/app/hive-management/forms/hive-section-form.component.html","webpack:///./src/app/hive-management/forms/hive-section-form.component.ts","webpack:///./src/app/hive-management/lists/hive-list.component.css","webpack:///./src/app/hive-management/lists/hive-list.component.html","webpack:///./src/app/hive-management/lists/hive-list.component.ts","webpack:///./src/app/hive-management/lists/hive-section-list.component.css","webpack:///./src/app/hive-management/lists/hive-section-list.component.html","webpack:///./src/app/hive-management/lists/hive-section-list.component.ts","webpack:///./src/app/hive-management/models/hive.ts","webpack:///./src/app/hive-management/services/hive-section.service.ts","webpack:///./src/app/hive-management/services/hive.service.ts","webpack:///./src/app/main-page/main-page.component.css","webpack:///./src/app/main-page/main-page.component.html","webpack:///./src/app/main-page/main-page.component.ts","webpack:///./src/app/product-management/forms/product-category-form.component.css","webpack:///./src/app/product-management/forms/product-category-form.component.html","webpack:///./src/app/product-management/forms/product-category-form.component.ts","webpack:///./src/app/product-management/forms/product-form.component.css","webpack:///./src/app/product-management/forms/product-form.component.html","webpack:///./src/app/product-management/forms/product-form.component.ts","webpack:///./src/app/product-management/lists/product-category-list.component.css","webpack:///./src/app/product-management/lists/product-category-list.component.html","webpack:///./src/app/product-management/lists/product-category-list.component.ts","webpack:///./src/app/product-management/lists/product-category-product-list.component.css","webpack:///./src/app/product-management/lists/product-category-product-list.component.html","webpack:///./src/app/product-management/lists/product-category-product-list.component.ts","webpack:///./src/app/product-management/lists/product-list.component.css","webpack:///./src/app/product-management/lists/product-list.component.html","webpack:///./src/app/product-management/lists/product-list.component.ts","webpack:///./src/app/product-management/models/product-category.ts","webpack:///./src/app/product-management/models/product.ts","webpack:///./src/app/product-management/services/product-category.service.ts","webpack:///./src/app/product-management/services/product.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainPageComponent } from 'app/main-page/main-page.component';\r\nimport { HiveFormComponent } from './hive-management/forms/hive-form.component';\r\nimport { HiveSectionFormComponent } from './hive-management/forms/hive-section-form.component';\r\nimport { HiveListComponent } from './hive-management/lists/hive-list.component';\r\nimport { HiveSectionListComponent } from './hive-management/lists/hive-section-list.component';\r\nimport { ProductCategoryFormComponent } from './product-management/forms/product-category-form.component';\r\nimport { ProductFormComponent } from './product-management/forms/product-form.component';\r\nimport { ProductCategoryListComponent } from './product-management/lists/product-category-list.component';\r\nimport { ProductCategoryProductListComponent } from './product-management/lists/product-category-product-list.component';\r\nimport { ProductListComponent } from './product-management/lists/product-list.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/main', pathMatch: 'full' },\r\n  { path: 'main', component: MainPageComponent },\r\n  { path: 'categories', component: ProductCategoryListComponent },\r\n  { path: 'category', component: ProductCategoryFormComponent },\r\n  { path: 'category/:id', component: ProductCategoryFormComponent },\r\n  { path: 'category/:id/products', component: ProductCategoryProductListComponent },\r\n  { path: 'products', component: ProductListComponent },\r\n  { path: 'product/:id', component: ProductFormComponent },\r\n  { path: 'category/:categoryId/product/:id', component: ProductFormComponent },\r\n  { path: 'hives', component: HiveListComponent },\r\n  { path: 'hive', component: HiveFormComponent },\r\n  { path: 'hive/:id', component: HiveFormComponent },\r\n  { path: 'hive/:id/sections', component: HiveSectionListComponent },\r\n  { path: 'section/:id', component: HiveSectionFormComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark justify-content-between\\\">\\r\\n  <div>\\r\\n    <a class=\\\"navbar-brand\\\" routerLink=\\\"/main\\\">\\r\\n      <span style=\\\"color: yellow; font-weight: bold; font-family: Arial, Helvetica, sans-serif; margin-right:0.1em; border: yellow solid 1px; padding: 6px;\\\">K</span>\\r\\n      <span style=\\\"margin-left: 5px;\\\">KatlaSport</span>\\r\\n    </a>\\r\\n  </div>\\r\\n  <div class=\\\"collapse navbar-collapse\\\" style=\\\"margin-left: 100px; margin-bottom: 2px;\\\" id=\\\"navbarNavDropdown\\\">\\r\\n    <ul class=\\\"navbar-nav\\\">\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/categories\\\">Categories</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/products\\\">Products</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/hives\\\">Hives</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item dropdown\\\">\\r\\n        <a class=\\\"nav-link dropdown-toggle\\\" href=\\\"#\\\" id=\\\"navbarDropdownMenuLink\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">Product Management</a>\\r\\n        <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"navbarDropdownMenuLink\\\">\\r\\n          <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Categories</a>\\r\\n          <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Products</a>\\r\\n        </div>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n  <form class=\\\"form-inline\\\">\\r\\n    <input class=\\\"form-control mr-sm-2\\\" type=\\\"search\\\" placeholder=\\\"Search\\\" aria-label=\\\"Search\\\">\\r\\n    <button class=\\\"btn btn-outline-success my-2 my-sm-0\\\" type=\\\"submit\\\">Search</button>\\r\\n  </form>\\r\\n</nav>\\r\\n<router-outlet></router-outlet>\\r\\n\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AppRoutingModule } from 'app/app-routing.module';\r\nimport { AppComponent } from 'app/app.component';\r\nimport { HiveFormComponent } from 'app/hive-management/forms/hive-form.component';\r\nimport { HiveSectionFormComponent } from 'app/hive-management/forms/hive-section-form.component';\r\nimport { HiveListComponent } from 'app/hive-management/lists/hive-list.component';\r\nimport { HiveSectionListComponent } from 'app/hive-management/lists/hive-section-list.component';\r\nimport { HiveSectionService } from 'app/hive-management/services/hive-section.service';\r\nimport { HiveService } from 'app/hive-management/services/hive.service';\r\nimport { MainPageComponent } from 'app/main-page/main-page.component';\r\nimport { ProductCategoryFormComponent } from 'app/product-management/forms/product-category-form.component';\r\nimport { ProductFormComponent } from 'app/product-management/forms/product-form.component';\r\nimport { ProductCategoryListComponent } from 'app/product-management/lists/product-category-list.component';\r\nimport { ProductCategoryProductListComponent } from 'app/product-management/lists/product-category-product-list.component';\r\nimport { ProductListComponent } from 'app/product-management/lists/product-list.component';\r\nimport { ProductCategoryService } from 'app/product-management/services/product-category.service';\r\nimport { ProductService } from 'app/product-management/services/product.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MainPageComponent,\r\n    ProductCategoryListComponent,\r\n    ProductCategoryFormComponent,\r\n    ProductCategoryProductListComponent,\r\n    ProductListComponent,\r\n    ProductFormComponent,\r\n    HiveListComponent,\r\n    HiveFormComponent,\r\n    HiveSectionFormComponent,\r\n    HiveSectionListComponent,\r\n  ],\r\n  imports: [\r\n    // Angular imports\r\n    BrowserModule,\r\n    FormsModule,\r\n    NgbModule.forRoot(),\r\n    HttpClientModule,\r\n    // Application imports\r\n    AppRoutingModule,\r\n  ],\r\n  providers: [\r\n    // Angular providers\r\n    HttpClient,\r\n    // Application providers\r\n    ProductService,\r\n    ProductCategoryService,\r\n    HiveService,\r\n    HiveSectionService,\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Hive Editor</h2>\\r\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #hiveForm=\\\"ngForm\\\">\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"idLabel\\\">ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"hive.id\\\" name=\\\"id\\\" #id=\\\"ngModel\\\"\\r\\n        readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Hive Name</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\" required [(ngModel)]=\\\"hive.name\\\"\\r\\n        name=\\\"name\\\" #name=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"name.errors.required\\\">Hive Name is required.</div>\\r\\n        <div *ngIf=\\\"name.errors.minlength\\\">Hive Name must be at least 4 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"lastUpdated\\\" id=\\\"lastUpdatedLabel\\\">Last Update</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastUpdated\\\" aria-describedby=\\\"lastUpdatedLabel\\\" required [(ngModel)]=\\\"hive.lastUpdated\\\"\\r\\n        name=\\\"lastUpdated\\\" #lastUpdated=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HiveService } from '../services/hive.service';\r\nimport { Hive } from '../models/hive';\r\n\r\n@Component({\r\n  selector: 'app-hive-form',\r\n  templateUrl: './hive-form.component.html',\r\n  styleUrls: ['./hive-form.component.css']\r\n})\r\nexport class HiveFormComponent implements OnInit {\r\n\r\n  hive = new Hive(0, \"\", \"\", \"\", false, \"\");\r\n  existed = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private hiveService: HiveService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      if (p['id'] === undefined) return;\r\n      this.hiveService.getHive(p['id']).subscribe(h => this.hive = h);\r\n      this.existed = true;\r\n    });\r\n  }\r\n\r\n  navigateToHives() {\r\n    this.router.navigate(['/hives']);\r\n  }\r\n\r\n  onCancel() {\r\n    this.navigateToHives();\r\n  }\r\n  \r\n  onSubmit() {\r\n  }\r\n\r\n  onDelete() {\r\n  }\r\n\r\n  onUndelete() {\r\n  }\r\n\r\n  onPurge() {\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  hive-section-form works!\\r\\n</p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-hive-section-form',\r\n  templateUrl: './hive-section-form.component.html',\r\n  styleUrls: ['./hive-section-form.component.css']\r\n})\r\nexport class HiveSectionFormComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Hive List</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <!-- TODO STEP 6 - Add Code and Name headers here. -->\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let hive of hives\\\">\\r\\n        <th scope=\\\"row\\\">{{hive.id}}</th>\\r\\n        <!-- TODO STEP 6 - Add code and name values here. -->\\r\\n        <th scope=\\\"row\\\">{{hive.Code}}</th>\\r\\n        <th scope=\\\"row\\\">{{hive.Name}}</th>\\r\\n        <td>\\r\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Hive action buttons\\\" style=\\\"display: block; white-space:nowrap;\\\">\\r\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"!hive.isDeleted\\\" (click)=\\\"onDelete(hive.id)\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger\\\">Delete</button>\\r\\n            </div>\\r\\n            <!-- TODO STEP 6 - Add buttons here. -->\\r\\n            <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"View group\\\">\\r\\n              <button routerLink=\\\"/hive/{{hive.id}}/sections\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View sections</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\r\\n              <button routerLink=\\\"/hive/{{hive.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"New group\\\">\\r\\n      <button routerLink=\\\"/hive\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">New hive</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { HiveListItem } from '../models/hive-list-item';\r\nimport { HiveService } from '../services/hive.service';\r\n\r\n@Component({\r\n  selector: 'app-hive-list',\r\n  templateUrl: './hive-list.component.html',\r\n  styleUrls: ['./hive-list.component.css']\r\n})\r\nexport class HiveListComponent implements OnInit {\r\n\r\n  hives: HiveListItem[];\r\n\r\n  constructor(private hiveService: HiveService) { }\r\n\r\n  ngOnInit() {\r\n    this.getHives();\r\n  }\r\n\r\n  getHives() {\r\n    this.hiveService.getHives().subscribe(h => this.hives = h);\r\n  }\r\n\r\n  onDelete(hiveId: number) {\r\n    var hive = this.hives.find(h => h.id == hiveId);\r\n    this.hiveService.setHiveStatus(hiveId, true).subscribe(c => hive.isDeleted = true);\r\n  }\r\n\r\n  onRestore(hiveId: number) {\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Hive Sections for Hive</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Back group\\\">\\r\\n      <button routerLink=\\\"/hives\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Back</button>\\r\\n    </div>\\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Add group\\\">\\r\\n      <button routerLink=\\\"/hive/{{this.hiveId}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Add hive section</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HiveSectionListItem } from '../models/hive-section-list-item';\r\nimport { HiveService } from '../services/hive.service';\r\n\r\n@Component({\r\n  selector: 'app-hive-section-list',\r\n  templateUrl: './hive-section-list.component.html',\r\n  styleUrls: ['./hive-section-list.component.css']\r\n})\r\nexport class HiveSectionListComponent implements OnInit {\r\n\r\n  hiveId: number;\r\n  hiveSections: Array<HiveSectionListItem>;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private hiveService: HiveService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","export class Hive {\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public code: string,\r\n        public address: string,\r\n        public isDeleted: boolean,\r\n        public lastUpdated: string\r\n    ) { }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { HiveSection } from '../models/hive-section';\r\nimport { HiveSectionListItem } from '../models/hive-section-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HiveSectionService {\r\n  private url = environment.apiUrl + 'api/sections/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getHiveSections(): Observable<Array<HiveSectionListItem>> {\r\n    return this.http.get<Array<HiveSectionListItem>>(this.url);\r\n  }\r\n\r\n  getHiveSection(hiveSectionId: number): Observable<HiveSection> {\r\n    return this.http.get<HiveSection>(`${this.url}${hiveSectionId}`);\r\n  }\r\n\r\n  setHiveSectionStatus(hiveSectionId: number, deletedStatus: boolean): Observable<Object> {\r\n    return null;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { Hive } from '../models/hive';\r\nimport { HiveListItem } from '../models/hive-list-item';\r\nimport { HiveSectionListItem } from '../models/hive-section-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HiveService {\r\n  private url = environment.apiUrl + 'api/hives/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getHives(): Observable<Array<HiveListItem>> {\r\n    return this.http.get<Array<HiveListItem>>(this.url);\r\n  }\r\n\r\n  getHive(hiveId: number): Observable<Hive> {\r\n    return this.http.get<Hive>(`${this.url}${hiveId}`);\r\n  }\r\n\r\n  getHiveSections(hiveId: number): Observable<Array<HiveSectionListItem>> {\r\n    return null;\r\n  }\r\n\r\n  addHive(hive: Hive): Observable<Hive> {\r\n    return null;\r\n  }\r\n\r\n  updateHive(hive: Hive): Observable<Object> {\r\n    return null;\r\n  }\r\n\r\n  deleteHive(hiveId: number): Observable<Object> {\r\n    return null;\r\n  }\r\n\r\n  setHiveStatus(hiveId: number, deletedStatus: boolean): Observable<Object> {\r\n    return null;\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron\\\">\\r\\n  <h1 class=\\\"display-4\\\"><span style=\\\"color: blueviolet; font-weight: bold; font-family: Arial, Helvetica, sans-serif; margin-right:0.1em; border: blueviolet solid 1px; padding: 6px;\\\">K</span>KatlaSport</h1>\\r\\n  <p class=\\\"lead\\\">Welcome to KatlaSport management console.</p>\\r\\n  <hr class=\\\"my-4\\\">\\r\\n  <p>Please, click on \\\"Learn more\\\" button to get more information about this project.</p>\\r\\n  <a class=\\\"btn btn-primary btn-lg\\\" href=\\\"https://github.com/epam-lab/katla\\\" role=\\\"button\\\">Learn more</a>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  templateUrl: './main-page.component.html',\r\n  styleUrls: ['./main-page.component.css']\r\n})\r\nexport class MainPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product Category Editor</h2>\\r\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #productCategoryForm=\\\"ngForm\\\">\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"idLabel\\\">ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"productCategory.id\\\" name=\\\"id\\\" #id=\\\"ngModel\\\"\\r\\n        readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Product Category Name</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\" required [(ngModel)]=\\\"productCategory.name\\\"\\r\\n        name=\\\"name\\\" #name=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"name.errors.required\\\">Product Category Name is required.</div>\\r\\n        <div *ngIf=\\\"name.errors.minlength\\\">Product Category Name must be at least 4 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"code\\\" id=\\\"codeLabel\\\">Product Category Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"code\\\" aria-describedby=\\\"codeLabel\\\" minlength=\\\"5\\\" maxlength=\\\"5\\\" required [(ngModel)]=\\\"productCategory.code\\\"\\r\\n        name=\\\"code\\\" #code=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"code.invalid && (code.dirty || code.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"code.errors.required\\\">Product Category Code is required.</div>\\r\\n        <div *ngIf=\\\"code.errors.minlength\\\">Product Category code must be at least 5 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"description\\\" id=\\\"descriptionLabel\\\">Product Category Description</label>\\r\\n      <textarea class=\\\"form-control\\\" id=\\\"description\\\" aria-describedby=\\\"descriptionLabel\\\" rows=\\\"4\\\" maxlength=\\\"300\\\" [(ngModel)]=\\\"productCategory.description\\\"\\r\\n        name=\\\"description\\\" #description=\\\"ngModel\\\">\\r\\n      </textarea>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"lastUpdated\\\" id=\\\"lastUpdatedLabel\\\">Last Update</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastUpdated\\\" aria-describedby=\\\"lastUpdatedLabel\\\" required [(ngModel)]=\\\"productCategory.lastUpdated\\\"\\r\\n        name=\\\"lastUpdated\\\" #lastUpdated=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed && !productCategory.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDelete()\\\">Delete</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Purge group\\\" *ngIf=\\\"existed && productCategory.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onUndelete()\\\">Undelete</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"onPurge()\\\">Purge</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ProductCategory } from '../models/product-category';\r\nimport { ProductCategoryService } from '../services/product-category.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-form',\r\n  templateUrl: './product-category-form.component.html',\r\n  styleUrls: ['./product-category-form.component.css']\r\n})\r\nexport class ProductCategoryFormComponent implements OnInit {\r\n\r\n  productCategory = new ProductCategory(0, \"My New Category\", \"CATE1\", \"Category description\", false, \"\");\r\n  existed = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productCategoryService: ProductCategoryService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      if (p['id'] === undefined) return;\r\n      this.productCategoryService.getProductCategory(p['id']).subscribe(c => this.productCategory = c);\r\n      this.existed = true;\r\n    });\r\n  }\r\n\r\n  navigateToCategories() {\r\n    this.router.navigate(['/categories']);\r\n  }\r\n\r\n  onCancel() {\r\n    this.navigateToCategories();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.existed) {\r\n      this.productCategoryService.updateProductCategory(this.productCategory).subscribe(c => this.navigateToCategories());\r\n    } else {\r\n      this.productCategoryService.addProductCategory(this.productCategory).subscribe(c => this.navigateToCategories());\r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n    this.productCategoryService.setProductCategoryStatus(this.productCategory.id, true).subscribe(c => this.productCategory.isDeleted = true);\r\n  }\r\n\r\n  onUndelete() {\r\n    this.productCategoryService.setProductCategoryStatus(this.productCategory.id, false).subscribe(c => this.productCategory.isDeleted = false);\r\n  }\r\n\r\n  onPurge() {\r\n    this.productCategoryService.deleteProductCategory(this.productCategory.id).subscribe(c => this.navigateToCategories());\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product Editor</h2>\\r\\n  <form (ngSubmit)=\\\"onSubmit()\\\" #productEditorForm=\\\"ngForm\\\">\\r\\n    <div class=\\\"form-group\\\" *ngIf=\\\"existed\\\">\\r\\n      <label for=\\\"idLabel\\\">ID</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" aria-describedby=\\\"idLabel\\\" [(ngModel)]=\\\"product.id\\\" name=\\\"id\\\" #id=\\\"ngModel\\\"\\r\\n        readonly>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"name\\\" id=\\\"nameLabel\\\">Product Name</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" aria-describedby=\\\"nameLabel\\\" minlength=\\\"4\\\" maxlength=\\\"60\\\" required [(ngModel)]=\\\"product.name\\\"\\r\\n        name=\\\"name\\\" #name=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"name.invalid && (name.dirty || name.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"name.errors.required\\\">Product Name is required.</div>\\r\\n        <div *ngIf=\\\"name.errors.minlength\\\">Product Name must be at least 4 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"code\\\" id=\\\"codeLabel\\\">Product Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"code\\\" aria-describedby=\\\"codeLabel\\\" minlength=\\\"5\\\" maxlength=\\\"5\\\" required [(ngModel)]=\\\"product.code\\\"\\r\\n        name=\\\"code\\\" #code=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"code.invalid && (code.dirty || code.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"code.errors.required\\\">Product Code is required.</div>\\r\\n        <div *ngIf=\\\"code.errors.minlength\\\">Product Code must be at least 5 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"category\\\" id=\\\"categoryLabel\\\">Product Category</label>\\r\\n      <select class=\\\"custom-select\\\" [(ngModel)]=\\\"product.categoryId\\\" id=\\\"category\\\" aria-describedby=\\\"categoryLabel\\\" #category=\\\"ngModel\\\"\\r\\n        [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n        <option *ngFor=\\\"let category of productCategories\\\" [ngValue]=\\\"category.id\\\">{{category.name}}</option>\\r\\n      </select>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"description\\\" id=\\\"descriptionLabel\\\">Product Description</label>\\r\\n      <textarea class=\\\"form-control\\\" id=\\\"description\\\" aria-describedby=\\\"descriptionLabel\\\" rows=\\\"4\\\" maxlength=\\\"300\\\" [(ngModel)]=\\\"product.description\\\"\\r\\n        name=\\\"description\\\" #description=\\\"ngModel\\\">\\r\\n      </textarea>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"manufacturerCode\\\" id=\\\"manufacturerCodeLabel\\\">Manufacturer Code</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"manufacturerCode\\\" aria-describedby=\\\"manufacturerCodeLabel\\\" minlength=\\\"4\\\" maxlength=\\\"10\\\"\\r\\n        required [(ngModel)]=\\\"product.manufacturerCode\\\" name=\\\"manufacturerCode\\\" #manufacturerCode=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"manufacturerCode.invalid && (manufacturerCode.dirty || manufacturerCode.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"manufacturerCode.errors.required\\\">Manufacturer Code is required.</div>\\r\\n        <div *ngIf=\\\"manufacturerCode.errors.minlength\\\">Manufacturer Code must be at least 10 characters long.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"price\\\" id=\\\"priceLabel\\\">Product Price</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"price\\\" aria-describedby=\\\"priceLabel\\\" required [(ngModel)]=\\\"product.price\\\" name=\\\"price\\\"\\r\\n        #price=\\\"ngModel\\\">\\r\\n      <div *ngIf=\\\"price.invalid && (price.dirty || price.touched)\\\" class=\\\"alert alert-danger\\\">\\r\\n        <div *ngIf=\\\"price.errors.required\\\">Product Price is required.</div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" *ngIf='existed'>\\r\\n      <label for=\\\"lastUpdated\\\">Last Update</label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastUpdated\\\" aria-describedby=\\\"lastUpdatedLabel\\\" required [(ngModel)]=\\\"product.lastUpdated\\\"\\r\\n        name=\\\"lastUpdated\\\" #lastUpdated=\\\"ngModel\\\" readonly>\\r\\n    </div>\\r\\n    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Cancel group\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onCancel()\\\">Back</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-4\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"existed && !product.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onDelete()\\\">Delete</button>\\r\\n      </div>\\r\\n      <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Purge group\\\" *ngIf=\\\"existed && product.isDeleted\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" (click)=\\\"onUndelete()\\\">Undelete</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"onPurge()\\\">Purge</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Product } from '../models/product';\r\nimport { ProductCategoryListItem } from '../models/product-category-list-item';\r\nimport { ProductCategoryService } from '../services/product-category.service';\r\nimport { ProductService } from '../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-form',\r\n  templateUrl: './product-form.component.html',\r\n  styleUrls: ['./product-form.component.css']\r\n})\r\nexport class ProductFormComponent implements OnInit {\r\n\r\n  product = new Product(0, \"\", \"\", 0, \"\", \"\", 0, false, \"\");\r\n  existed = false;\r\n  categoryId: number;\r\n  productCategories: ProductCategoryListItem[];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService,\r\n    private productCategoryService: ProductCategoryService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.productCategoryService.getProductCategories().subscribe(c => this.productCategories = c);\r\n    this.route.params.subscribe(p => {\r\n      this.categoryId = p['categoryId'];\r\n      if (p['id'] === undefined) return;\r\n      this.productService.getProduct(p['id']).subscribe(c => this.product = c);\r\n      this.existed = true;\r\n    });\r\n  }\r\n\r\n  navigateTo() {\r\n    if (this.categoryId === undefined) {\r\n      this.router.navigate(['/products']);\r\n    } else {\r\n      this.router.navigate([`/category/${this.categoryId}/products`]);\r\n    }\r\n  }\r\n\r\n  onCancel() {\r\n    this.navigateTo();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.existed) {\r\n      this.productService.updateProduct(this.product).subscribe(p => this.navigateTo());\r\n    } else {\r\n      this.product.сategoryId = this.categoryId;\r\n      this.productService.addProduct(this.product).subscribe(p => this.navigateTo());\r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n  }\r\n\r\n  onUndelete() {\r\n  }\r\n\r\n  onPurge() {\r\n    this.productService.deleteProduct(this.product.id).subscribe(p => this.navigateTo());\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product Category List</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <!-- TODO STEP 4 - Add column header here. -->\\r\\n      <th scope=\\\"col\\\">Products</th>\\r\\n      <th scope=\\\"col\\\">Last Update</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let productCategory of productCategories\\\">\\r\\n        <th scope=\\\"row\\\">{{productCategory.id}}</th>\\r\\n        <td>{{productCategory.code}}</td>\\r\\n        <td>{{productCategory.name}}</td>\\r\\n        <!-- TODO STEP 4 - Add row cell here. -->\\r\\n        <td>{{productCategory.productCount}}</td>\\r\\n        <td>{{productCategory.lastUpdated}}</td>\\r\\n        <td>\\r\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product category action buttons\\\" style=\\\"display: block; white-space:nowrap;\\\">\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"productCategory.isDeleted\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-warning\\\">Deleted</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View group\\\">\\r\\n              <button routerLink=\\\"/category/{{productCategory.id}}/products\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View products</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\r\\n              <button routerLink=\\\"/category/{{productCategory.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Save group\\\">\\r\\n      <button routerLink=\\\"/category\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">New Product Category</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ProductCategoryListItem } from '../models/product-category-list-item';\r\nimport { ProductCategoryService } from '../services/product-category.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-list',\r\n  templateUrl: './product-category-list.component.html',\r\n  styleUrls: ['./product-category-list.component.css']\r\n})\r\nexport class ProductCategoryListComponent implements OnInit {\r\n\r\n  selectedProductCategory: ProductCategoryListItem;\r\n  productCategories: ProductCategoryListItem[];\r\n\r\n  constructor(private productCategoryService: ProductCategoryService) { }\r\n\r\n  ngOnInit() {\r\n    this.getProductCategories();\r\n  }\r\n\r\n  onSelect(productCategory: ProductCategoryListItem): void {\r\n    this.selectedProductCategory = productCategory;\r\n  }\r\n\r\n  getProductCategories(): void {\r\n    this.productCategoryService.getProductCategories().subscribe(c => this.productCategories = c);\r\n  }\r\n\r\n  enableProductCategory(): void {\r\n  }\r\n\r\n  disableProductCategory(): void {\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Products for Category</h2>\\r\\n  <table class=\\\"table table-nonfluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <th scope=\\\"col\\\">Last Update</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let product of products\\\">\\r\\n        <th scope=\\\"row\\\">{{product.id}}</th>\\r\\n        <td>{{product.code}}</td>\\r\\n        <td>{{product.name}}</td>\\r\\n        <td>{{product.lastUpdated}}</td>\\r\\n        <td>\\r\\n          <span class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product category action buttons\\\" style=\\\"display: block; white-space:nowrap;\\\">\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete product\\\" *ngIf=\\\"product.isDeleted\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-danger\\\">Deleted</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit product\\\">\\r\\n              <button routerLink=\\\"/category/{{this.categoryId}}/product/{{product.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n  <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Action buttons\\\">\\r\\n    <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Back group\\\">\\r\\n      <button routerLink=\\\"/categories\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View categories</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ProductCategoryProductListItem } from '../models/product-category-product-list-item';\r\nimport { ProductService } from '../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-product-list',\r\n  templateUrl: './product-category-product-list.component.html',\r\n  styleUrls: ['./product-category-product-list.component.css']\r\n})\r\nexport class ProductCategoryProductListComponent implements OnInit {\r\n\r\n  categoryId: number;\r\n  products: ProductCategoryProductListItem[];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(p => {\r\n      this.categoryId = p['id'];\r\n      this.productService.getCategoryProducts(p['id']).subscribe(p => this.products = p);\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <h2>Product List</h2>\\r\\n  <table class=\\\"table table-nofluid\\\">\\r\\n    <thead>\\r\\n      <th scope=\\\"col\\\">#</th>\\r\\n      <th scope=\\\"col\\\">Code</th>\\r\\n      <th scope=\\\"col\\\">Name</th>\\r\\n      <th scope=\\\"col\\\">Category</th>\\r\\n      <th scope=\\\"col\\\">Last Update</th>\\r\\n      <th scope=\\\"col\\\"></th>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let product of products\\\">\\r\\n        <th scope=\\\"row\\\">{{product.id}}</th>\\r\\n        <td>{{product.code}}</td>\\r\\n        <td>{{product.name}}</td>\\r\\n        <td>{{product.categoryCode}}</td>\\r\\n        <td>{{product.lastUpdated}}</td>\\r\\n        <td>\\r\\n          <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Product action buttons\\\">\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"Delete group\\\" *ngIf=\\\"product.isDeleted\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-warning\\\">Deleted</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group mr-1\\\" role=\\\"group\\\" aria-label=\\\"View category group\\\">\\r\\n              <button routerLink=\\\"/category/{{product.categoryId}}/products\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">View category products</button>\\r\\n            </div>\\r\\n            <div class=\\\"btn-group\\\" role=\\\"group\\\" aria-label=\\\"Edit group\\\">\\r\\n              <button routerLink=\\\"/product/{{product.id}}\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Edit</button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ProductListItem } from '../models/product-list-item';\r\nimport { ProductService } from '../services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  templateUrl: './product-list.component.html',\r\n  styleUrls: ['./product-list.component.css']\r\n})\r\nexport class ProductListComponent implements OnInit {\r\n\r\n  products: ProductListItem[];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.productService.getProducts().subscribe(p => this.products = p);\r\n  }\r\n}\r\n","export class ProductCategory {\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public code: string,\r\n        public description: string,\r\n        public isDeleted: boolean,\r\n        public lastUpdated: string\r\n    ) { }\r\n}\r\n","export class Product {\r\n    constructor(\r\n        public id: number,\r\n        public code: string,\r\n        public name: string,\r\n        public сategoryId: number,\r\n        public description: string,\r\n        public manufacturerCode: string,\r\n        public price: number,\r\n        public isDeleted: boolean,\r\n        public lastUpdated: string\r\n    ) { }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { ProductCategory } from '../models/product-category';\r\nimport { ProductCategoryListItem } from '../models/product-category-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductCategoryService {\r\n  private url = environment.apiUrl + 'api/categories/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProductCategories(): Observable<Array<ProductCategoryListItem>> {\r\n    return this.http.get<Array<ProductCategoryListItem>>(this.url);\r\n  }\r\n\r\n  getProductCategory(productCategoryId: number): Observable<ProductCategory> {\r\n    return this.http.get<ProductCategory>(`${this.url}${productCategoryId}`);\r\n  }\r\n\r\n  addProductCategory(productCategory: ProductCategory): Observable<ProductCategory> {\r\n    return this.http.post<ProductCategory>(this.url, productCategory);\r\n  }\r\n\r\n  updateProductCategory(productCategory: ProductCategory): Observable<ProductCategory> {\r\n    return this.http.put<ProductCategory>(`${this.url}${productCategory.id}`, productCategory);\r\n  }\r\n\r\n  deleteProductCategory(productCategoryId: number): Observable<Object> {\r\n    return this.http.delete<Object>(`${this.url}${productCategoryId}`);\r\n  }\r\n\r\n  setProductCategoryStatus(productCategoryId: number, deletedStatus: boolean): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${productCategoryId}/status/${deletedStatus}`, null);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../models/product';\r\nimport { ProductCategoryProductListItem } from '../models/product-category-product-list-item';\r\nimport { ProductListItem } from '../models/product-list-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private url = environment.apiUrl + 'api/products/';\r\n  private categoryUrl = environment.apiUrl + 'api/categories/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProducts(): Observable<Array<ProductListItem>> {\r\n    return this.http.get<Array<ProductListItem>>(this.url);\r\n  }\r\n\r\n  getProduct(productId: number): Observable<Product> {\r\n    return this.http.get<Product>(`${this.url}${productId}`);\r\n  }\r\n\r\n  getCategoryProducts(productCategoryId: number): Observable<Array<ProductCategoryProductListItem>> {\r\n    return this.http.get<Array<ProductCategoryProductListItem>>(`${this.categoryUrl}${productCategoryId}/products`);\r\n  }\r\n\r\n  addProduct(product: Product): Observable<Product> {\r\n    return this.http.post<Product>(`${this.url}`, product);\r\n  }\r\n\r\n  updateProduct(product: Product): Observable<Object> {\r\n    return this.http.put<Object>(`${this.url}${product.id}`, product);\r\n  }\r\n\r\n  deleteProduct(productId: number): Observable<Object> {\r\n    return this.http.delete<Object>(`${this.url}${productId}`);\r\n  }\r\n}\r\n","import 'zone.js/dist/zone-error';\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:56952/',\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}